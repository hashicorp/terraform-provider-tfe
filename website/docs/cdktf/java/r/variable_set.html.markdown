---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_variable_set"
description: |-
  Manages variable sets.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_variable_set

Creates, updates and destroys variable sets.

## Example Usage

Basic usage:

```java
import software.constructs.*;
import com.hashicorp.cdktf.*;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import gen.providers.tfe.organization.*;
import gen.providers.tfe.project.*;
import gen.providers.tfe.variableSet.*;
import gen.providers.tfe.workspace.*;
import gen.providers.tfe.workspaceVariableSet.*;
import gen.providers.tfe.projectVariableSet.*;
import gen.providers.tfe.variable.*;
public class MyConvertedCode extends TerraformStack {
    public MyConvertedCode(Construct scope, String name) {
        super(scope, name);
        Organization tfeOrganizationTest = new Organization(this, "test", new OrganizationConfig()
                .email("admin@company.com")
                .name("my-org-name")
                );
        Project tfeProjectTest = new Project(this, "test_1", new ProjectConfig()
                .name("projectname")
                .organization(Token.asString(tfeOrganizationTest.getName()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeProjectTest.overrideLogicalId("test");
        VariableSet tfeVariableSetTest = new VariableSet(this, "test_2", new VariableSetConfig()
                .description("Some description.")
                .name("Test Varset")
                .organization(Token.asString(tfeOrganizationTest.getName()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeVariableSetTest.overrideLogicalId("test");
        Workspace tfeWorkspaceTest = new Workspace(this, "test_3", new WorkspaceConfig()
                .name("my-workspace-name")
                .organization(Token.asString(tfeOrganizationTest.getName()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeWorkspaceTest.overrideLogicalId("test");
        WorkspaceVariableSet tfeWorkspaceVariableSetTest =
        new WorkspaceVariableSet(this, "test_4", new WorkspaceVariableSetConfig()
                .variableSetId(Token.asString(tfeVariableSetTest.getId()))
                .workspaceId(Token.asString(tfeWorkspaceTest.getId()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeWorkspaceVariableSetTest.overrideLogicalId("test");
        ProjectVariableSet tfeProjectVariableSetTest =
        new ProjectVariableSet(this, "test_5", new ProjectVariableSetConfig()
                .projectId(Token.asString(tfeProjectTest.getId()))
                .variableSetId(Token.asString(tfeVariableSetTest.getId()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeProjectVariableSetTest.overrideLogicalId("test");
        new Variable(this, "test-a", new VariableConfig()
                .category("terraform")
                .description("a useful description")
                .key("seperate_variable")
                .value("my_value_name")
                .variableSetId(Token.asString(tfeVariableSetTest.getId()))
                );
        new Variable(this, "test-b", new VariableConfig()
                .category("env")
                .description("an environment variable")
                .key("another_variable")
                .value("my_value_name")
                .variableSetId(Token.asString(tfeVariableSetTest.getId()))
                );
    }
}
```

Creating a global variable set:

```java
import software.constructs.*;
import com.hashicorp.cdktf.*;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import gen.providers.tfe.organization.*;
import gen.providers.tfe.variableSet.*;
import gen.providers.tfe.variable.*;
public class MyConvertedCode extends TerraformStack {
    public MyConvertedCode(Construct scope, String name) {
        super(scope, name);
        Organization tfeOrganizationTest = new Organization(this, "test", new OrganizationConfig()
                .email("admin@company.com")
                .name("my-org-name")
                );
        VariableSet tfeVariableSetTest = new VariableSet(this, "test_1", new VariableSetConfig()
                .description("Variable set applied to all workspaces.")
                .global(true)
                .name("Global Varset")
                .organization(Token.asString(tfeOrganizationTest.getName()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeVariableSetTest.overrideLogicalId("test");
        new Variable(this, "test-a", new VariableConfig()
                .category("terraform")
                .description("a useful description")
                .key("seperate_variable")
                .value("my_value_name")
                .variableSetId(Token.asString(tfeVariableSetTest.getId()))
                );
        new Variable(this, "test-b", new VariableConfig()
                .category("env")
                .description("an environment variable")
                .key("another_variable")
                .value("my_value_name")
                .variableSetId(Token.asString(tfeVariableSetTest.getId()))
                );
    }
}
```

Create a priority variable set:

```java
import software.constructs.*;
import com.hashicorp.cdktf.*;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import gen.providers.tfe.organization.*;
import gen.providers.tfe.variableSet.*;
import gen.providers.tfe.variable.*;
public class MyConvertedCode extends TerraformStack {
    public MyConvertedCode(Construct scope, String name) {
        super(scope, name);
        Organization tfeOrganizationTest = new Organization(this, "test", new OrganizationConfig()
                .email("admin@company.com")
                .name("my-org-name")
                );
        VariableSet tfeVariableSetTest = new VariableSet(this, "test_1", new VariableSetConfig()
                .description("Variable set applied to all workspaces.")
                .name("Global Varset")
                .organization(Token.asString(tfeOrganizationTest.getName()))
                .priority(true)
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeVariableSetTest.overrideLogicalId("test");
        new Variable(this, "test-a", new VariableConfig()
                .category("terraform")
                .description("a useful description")
                .key("seperate_variable")
                .value("my_value_name")
                .variableSetId(Token.asString(tfeVariableSetTest.getId()))
                );
        new Variable(this, "test-b", new VariableConfig()
                .category("env")
                .description("an environment variable")
                .key("another_variable")
                .value("my_value_name")
                .variableSetId(Token.asString(tfeVariableSetTest.getId()))
                );
    }
}
```

Creating a project-owned variable set that is applied to all workspaces in the project:

```java
import software.constructs.*;
import com.hashicorp.cdktf.*;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import gen.providers.tfe.organization.*;
import gen.providers.tfe.project.*;
import gen.providers.tfe.variableSet.*;
import gen.providers.tfe.projectVariableSet.*;
public class MyConvertedCode extends TerraformStack {
    public MyConvertedCode(Construct scope, String name) {
        super(scope, name);
        Organization tfeOrganizationTest = new Organization(this, "test", new OrganizationConfig()
                .email("admin@company.com")
                .name("my-org-name")
                );
        Project tfeProjectTest = new Project(this, "test_1", new ProjectConfig()
                .name("projectname")
                .organization(Token.asString(tfeOrganizationTest.getName()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeProjectTest.overrideLogicalId("test");
        VariableSet tfeVariableSetTest = new VariableSet(this, "test_2", new VariableSetConfig()
                .description("Varset that is owned and managed by a project.")
                .name("Project-owned Varset")
                .organization(Token.asString(tfeOrganizationTest.getName()))
                .parentProjectId(Token.asString(tfeProjectTest.getId()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeVariableSetTest.overrideLogicalId("test");
        ProjectVariableSet tfeProjectVariableSetTest =
        new ProjectVariableSet(this, "test_3", new ProjectVariableSetConfig()
                .projectId(Token.asString(tfeProjectTest.getId()))
                .variableSetId(Token.asString(tfeVariableSetTest.getId()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeProjectVariableSetTest.overrideLogicalId("test");
    }
}
```

Creating a project-owned variable set that is applied to specific workspaces:

```java
import software.constructs.*;
import com.hashicorp.cdktf.*;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import gen.providers.tfe.organization.*;
import gen.providers.tfe.project.*;
import gen.providers.tfe.variableSet.*;
import gen.providers.tfe.workspace.*;
import gen.providers.tfe.workspaceVariableSet.*;
public class MyConvertedCode extends TerraformStack {
    public MyConvertedCode(Construct scope, String name) {
        super(scope, name);
        Organization tfeOrganizationTest = new Organization(this, "test", new OrganizationConfig()
                .email("admin@company.com")
                .name("my-org-name")
                );
        Project tfeProjectTest = new Project(this, "test_1", new ProjectConfig()
                .name("projectname")
                .organization(Token.asString(tfeOrganizationTest.getName()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeProjectTest.overrideLogicalId("test");
        VariableSet tfeVariableSetTest = new VariableSet(this, "test_2", new VariableSetConfig()
                .description("Varset that is owned and managed by a project.")
                .name("Project-owned Varset")
                .organization(Token.asString(tfeOrganizationTest.getName()))
                .parentProjectId(Token.asString(tfeProjectTest.getId()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeVariableSetTest.overrideLogicalId("test");
        Workspace tfeWorkspaceTest = new Workspace(this, "test_3", new WorkspaceConfig()
                .name("my-workspace-name")
                .organization(Token.asString(tfeOrganizationTest.getName()))
                .projectId(Token.asString(tfeProjectTest.getId()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeWorkspaceTest.overrideLogicalId("test");
        WorkspaceVariableSet tfeWorkspaceVariableSetTest =
        new WorkspaceVariableSet(this, "test_4", new WorkspaceVariableSetConfig()
                .variableSetId(Token.asString(tfeVariableSetTest.getId()))
                .workspaceId(Token.asString(tfeWorkspaceTest.getId()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeWorkspaceVariableSetTest.overrideLogicalId("test");
    }
}
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Name of the variable set.
* `description` - (Optional) Description of the variable set.
* `global` - (Optional) Whether the variable set applies to all workspaces in the organization. Defaults to `false`.
* `priority` - (Optional) Whether the variables in this set can be over-written by more specific scopes including values set on the command line. Defaults to `false`.
* `organization` - (Optional) Name of the organization. If omitted, organization must be defined in the provider config.
* `workspaceIds` - **Deprecated** (Optional) IDs of the workspaces that use the variable set.
  Must not be set if `global` is set. This argument is mutually exclusive with using the resource
  [tfe_workspace_variable_set](workspace_variable_set.html) which is the preferred method of associating a workspace
  with a variable set.
* `parentProjectId` - (Optional) ID of the project that should own the variable set. If set, than the value of `global` must be `false`.
  To assign whether a variable set should be applied to a project, use the [`tfeProjectVariableSet`](project_variable_set.html) resource.

## Attributes Reference

* `id` - The ID of the variable set.

## Import

Variable sets can be imported; use `<VARIABLE SET ID>` as the import ID. For example:

```shell
terraform import tfe_variable_set.test varset-5rTwnSaRPogw6apb
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-e43c37b8fda384ac825900c2a05dad46b7405306e02b1151313679fb612e7a61 -->