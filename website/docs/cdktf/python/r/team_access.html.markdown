---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_team_access"
description: |-
  Associate a team to permissions on a workspace.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_team_access

Associate a team to permissions on a workspace.

## Example Usage

Basic usage:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_team_test = tfe.team.Team(self, "test",
            name="my-team-name",
            organization="my-org-name"
        )
        tfe_workspace_test = tfe.workspace.Workspace(self, "test_1",
            name="my-workspace-name",
            organization="my-org-name"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_workspace_test.override_logical_id("test")
        tfe_team_access_test = tfe.team_access.TeamAccess(self, "test_2",
            access="read",
            team_id=cdktf.Token.as_string(tfe_team_test.id),
            workspace_id=cdktf.Token.as_string(tfe_workspace_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_access_test.override_logical_id("test")
```

## Argument Reference

The following arguments are supported:

* `team_id` - (Required) ID of the team to add to the workspace.
* `workspace_id` - (Required) ID of the workspace to which the team will be added.
* `access` - (Optional) Type of fixed access to grant. Valid values are `admin`, `read`, `plan`, or `write`. To use `custom` permissions, use a `permissions` block instead. This value _must not_ be provided if `permissions` is provided.
* `permissions` - (Optional) Permissions to grant using [custom workspace permissions](https://developer.hashicorp.com/terraform/cloud-docs/users-teams-organizations/permissions#custom-workspace-permissions). This value _must not_ be provided if `access` is provided.

The `permissions` block supports:

* `runs` - (Required) The permission to grant the team on the workspace's runs. Valid values are `read`, `plan`, or `apply`.
* `variables` - (Required) The permission to grant the team on the workspace's variables. Valid values are `none`, `read`, or `write`.
* `state_versions` - (Required) The permission to grant the team on the workspace's state versions. Valid values are `none`, `read`, `read-outputs`, or `write`.
* `sentinel_mocks` - (Required) The permission to grant the team on the workspace's generated Sentinel mocks, Valid values are `none` or `read`.
* `workspace_locking` - (Required) Boolean determining whether or not to grant the team permission to manually lock/unlock the workspace.
* `run_tasks` - (Required) Boolean determining whether or not to grant the team permission to manage workspace run tasks.

-> **Note:** At least one of `access` or `permissions` _must_ be provided, but not both. Whichever is omitted will automatically reflect the state of the other.

## Attributes Reference

* `id` The team access ID.

## Import

Team accesses can be imported; use
`<ORGANIZATION NAME>/<WORKSPACE NAME>/<TEAM ACCESS ID>` as the import ID. For
example:

```shell
terraform import tfe_team_access.test my-org-name/my-workspace-name/tws-8S5wnRbRpogw6apb
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-1f416915697c1b047d62f590ef6bc829e7f2a7f58be51029af4020952110b5d6 -->