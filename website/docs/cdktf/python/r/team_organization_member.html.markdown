---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_team_organization_member"
description: |-
  Add or remove a user from a team.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_team_organization_member

Add or remove a team member using a
[tfe_organization_membership](organization_membership.html).

~> **NOTE** on managing team memberships: Terraform currently provides four
resources for managing team memberships. This - along with [tfe_organization_membership](organization_membership.html) - is the preferred method as it
allows you to add members to a team by email addresses. The [tfe_team_organization_member](team_organization_member.html) is used to manage a single team membership whereas [tfe_team_organization_members](team_organization_members.html) is used to manage all team memberships at once. All four resources cannot be used for the same team simultaneously.

~> **NOTE:** This resource requires using the provider with HCP Terraform or
an instance of Terraform Enterprise at least as recent as v202004-1.

## Example Usage

Basic usage:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_organization_membership_test =
        tfe.organization_membership.OrganizationMembership(self, "test",
            email="example@hashicorp.com",
            organization="my-org-name"
        )
        tfe_team_test = tfe.team.Team(self, "test_1",
            name="my-team-name",
            organization="my-org-name"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_test.override_logical_id("test")
        tfe_team_organization_member_test =
        tfe.team_organization_member.TeamOrganizationMember(self, "test_2",
            organization_membership_id=cdktf.Token.as_string(tfe_organization_membership_test.id),
            team_id=cdktf.Token.as_string(tfe_team_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_organization_member_test.override_logical_id("test")
```

## Argument Reference

The following arguments are supported:

* `team_id` - (Required) ID of the team.
* `organization_membership_id` - (Required) ID of the organization membership.

## Import

A team member can be imported; use `<TEAM ID>/<ORGANIZATION MEMBERSHIP ID>` or `<ORGANIZATION NAME>/<USER EMAIL>/<TEAM NAME>`
as the import ID. For example:

```shell
terraform import tfe_team_organization_member.test team-47qC3LmA47piVan7/ou-2342390sdf0jj
```
or
```shell
terraform import tfe_team_organization_member.test my-org-name/user@company.com/my-team-name
```
~> **NOTE:** The `<ORGANIZATION NAME>/<USER EMAIL>/<TEAM NAME>` import ID format cannot be used if there are `/` characters in the user's email. These users must be imported with the `<TEAM ID>/<ORGANIZATION MEMBERSHIP ID>` format instead  
<!-- cache-key: cdktf-0.17.0-pre.15 input-7251454fdf71a5749991a2615afcd7f66f40a26543f2967198dc400d5fcad76b -->