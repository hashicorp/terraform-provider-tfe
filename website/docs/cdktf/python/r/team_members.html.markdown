---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_team_members"
description: |-
  Manages users in a team.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_team_members

Manages users in a team.

~> **NOTE** on managing team memberships: Terraform currently provides four
resources for managing team memberships.
The [tfe_team_organization_member](team_organization_member.html) and [tfe_team_organization_members](team_organization_members.html) resources are
the preferred way. The [tfe_team_member](team_member.html)
resource can be used multiple times as it manages the team membership for a
single user.  The [tfe_team_members](team_members.html) resource, on the other
hand, is used to manage all team memberships for a specific team and can only be
used once. All four resources cannot be used for the same team simultaneously.

## Example Usage

Basic usage:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_team_test = tfe.team.Team(self, "test",
            name="my-team-name",
            organization="my-org-name"
        )
        tfe_team_members_test = tfe.team_members.TeamMembers(self, "test_1",
            team_id=cdktf.Token.as_string(tfe_team_test.id),
            usernames=["admin", "sander"]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_members_test.override_logical_id("test")
```

With a set of usernames:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        all_usernames = cdktf.Fn.toset(["user1", "user2"])
        tfe_team_test = tfe.team.Team(self, "test",
            name="my-team-name",
            organization="my-org-name"
        )
        tfe_team_members_test = tfe.team_members.TeamMembers(self, "test_1",
            team_id=cdktf.Token.as_string(tfe_team_test.id),
            usernames=cdktf.Token.as_list("${[ for user in ${" + all_usernames + "} : user]}")
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_members_test.override_logical_id("test")
```

## Argument Reference

The following arguments are supported:

* `team_id` - (Required) ID of the team.
* `usernames` - (Required) Names of the users to add.

## Attributes Reference

* `id` - The ID of the team.

## Import

Team members can be imported; use `<TEAM ID>` as the import ID. For example:

```shell
terraform import tfe_team_members.test team-47qC3LmA47piVan7
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-37e1078f8bb8f3145d8680ab69ee6750373f41a03589ff0885d16ebc69a1e13c -->