---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_notification_configuration"
description: |-
  Manages notifications configurations.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_notification_configuration

HCP Terraform can be configured to send notifications for run state transitions.
Notification configurations allow you to specify a URL, destination type, and what events will trigger the notification.
Each workspace can have up to 20 notification configurations, and they apply to all runs for that workspace.


## Example Usage

Basic usage:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.tfe.notification_configuration import NotificationConfiguration
from imports.tfe.organization import Organization
from imports.tfe.workspace import Workspace
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = Organization(self, "test",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_workspace_test = Workspace(self, "test_1",
            name="my-workspace-name",
            organization=test.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_workspace_test.override_logical_id("test")
        tfe_notification_configuration_test = NotificationConfiguration(self, "test_2",
            destination_type="generic",
            enabled=True,
            name="my-test-notification-configuration",
            triggers=["run:created", "run:planning", "run:errored"],
            url="https://example.com",
            workspace_id=Token.as_string(tfe_workspace_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_notification_configuration_test.override_logical_id("test")
```

With `destination_type` of `email`:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.tfe.notification_configuration import NotificationConfiguration
from imports.tfe.organization import Organization
from imports.tfe.organization_membership import OrganizationMembership
from imports.tfe.workspace import Workspace
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = Organization(self, "test",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_organization_membership_test = OrganizationMembership(self, "test_1",
            email="test.member@company.com",
            organization="my-org-name"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_organization_membership_test.override_logical_id("test")
        tfe_workspace_test = Workspace(self, "test_2",
            name="my-workspace-name",
            organization=test.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_workspace_test.override_logical_id("test")
        tfe_notification_configuration_test = NotificationConfiguration(self, "test_3",
            destination_type="email",
            email_user_ids=[Token.as_string(tfe_organization_membership_test.user_id)],
            enabled=True,
            name="my-test-email-notification-configuration",
            triggers=["run:created", "run:planning", "run:errored"],
            workspace_id=Token.as_string(tfe_workspace_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_notification_configuration_test.override_logical_id("test")
```

(**TFE only**) With `destination_type` of `email`, using `email_addresses` list and `email_users`:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.tfe.notification_configuration import NotificationConfiguration
from imports.tfe.organization import Organization
from imports.tfe.organization_membership import OrganizationMembership
from imports.tfe.workspace import Workspace
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = Organization(self, "test",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_organization_membership_test = OrganizationMembership(self, "test_1",
            email="test.member@company.com",
            organization="my-org-name"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_organization_membership_test.override_logical_id("test")
        tfe_workspace_test = Workspace(self, "test_2",
            name="my-workspace-name",
            organization=test.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_workspace_test.override_logical_id("test")
        tfe_notification_configuration_test = NotificationConfiguration(self, "test_3",
            destination_type="email",
            email_addresses=["user1@company.com", "user2@company.com", "user3@company.com"
            ],
            email_user_ids=[Token.as_string(tfe_organization_membership_test.user_id)],
            enabled=True,
            name="my-test-email-notification-configuration",
            triggers=["run:created", "run:planning", "run:errored"],
            workspace_id=Token.as_string(tfe_workspace_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_notification_configuration_test.override_logical_id("test")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Name of the notification configuration.
* `destination_type` - (Required) The type of notification configuration payload to send.
  Valid values are:
  * `generic`
  * `email` available in HCP Terraform or Terraform Enterprise v202005-1 or later
  * `slack`
  * `microsoft-teams` available in HCP Terraform or Terraform Enterprise v202206-1 or later
* `email_addresses` - (Optional) **TFE only** A list of email addresses. This value
  _must not_ be provided if `destination_type` is `generic`, `microsoft-teams`, or `slack`.
* `email_user_ids` - (Optional) A list of user IDs. This value _must not_ be provided
  if `destination_type` is `generic`, `microsoft-teams`, or `slack`.
* `enabled` - (Optional) Whether the notification configuration should be enabled or not.
  Disabled configurations will not send any notifications. Defaults to `false`.
* `token` - (Optional) A write-only secure token for the notification configuration, which can
  be used by the receiving server to verify request authenticity when configured for notification
  configurations with a destination type of `generic`. Defaults to `null`.
  This value _must not_ be provided if `destination_type` is `email`, `microsoft-teams`, or `slack`.
* `triggers` - (Optional) The array of triggers for which this notification configuration will
  send notifications. Valid values are `run:created`, `run:planning`, `run:needs_attention`, `run:applying`
  `run:completed`, `run:errored`, `assessment:check_failure`, `assessment:drifted`, `assessment:failed`, `workspace:auto_destroy_reminder`, or `workspace:auto_destroy_run_results`.
  If omitted, no notification triggers are configured.
* `url` - (Required if `destination_type` is `generic`, `microsoft-teams`, or `slack`) The HTTP or HTTPS URL of the notification
  configuration where notification requests will be made. This value _must not_ be provided if `destination_type`
  is `email`.
* `workspace_id` - (Required) The id of the workspace that owns the notification configuration.

## Attributes Reference

* `id` - The ID of the notification configuration.

## Import

Notification configurations can be imported; use `<NOTIFICATION CONFIGURATION ID>` as the import ID. For example:

```shell
terraform import tfe_notification_configuration.test nc-qV9JnKRkmtMa4zcA
```

<!-- cache-key: cdktf-0.20.8 input-710b7782960f76dfa6c0cc90313ce4411ea1070e9620f03dafea7305849d1d27 -->