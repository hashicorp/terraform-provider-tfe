---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_no_code_module"
description: |-
  Manages no code settings for registry modules
---


<!-- Please do not edit this file, it is generated. -->
# tfe_no_code_module

Creates, updates and destroys no-code module for registry modules.

## Example Usage

Basic usage:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.tfe.no_code_module import NoCodeModule
from imports.tfe.organization import Organization
from imports.tfe.registry_module import RegistryModule
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        foobar = Organization(self, "foobar",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_registry_module_foobar = RegistryModule(self, "foobar_1",
            module_provider="my_provider",
            name="test_module",
            organization=foobar.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_registry_module_foobar.override_logical_id("foobar")
        tfe_no_code_module_foobar = NoCodeModule(self, "foobar_2",
            organization=foobar.id,
            registry_module=Token.as_string(tfe_registry_module_foobar.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_no_code_module_foobar.override_logical_id("foobar")
```

Creating a no-code module with variable options:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.tfe.no_code_module import NoCodeModule
from imports.tfe.organization import Organization
from imports.tfe.registry_module import RegistryModule
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        foobar = Organization(self, "foobar",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_registry_module_foobar = RegistryModule(self, "foobar_1",
            module_provider="my_provider",
            name="test_module",
            organization=foobar.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_registry_module_foobar.override_logical_id("foobar")
        tfe_no_code_module_foobar = NoCodeModule(self, "foobar_2",
            organization=foobar.id,
            registry_module=Token.as_string(tfe_registry_module_foobar.id),
            variable_options=[NoCodeModuleVariableOptions(
                name="ami",
                options=["ami-0", "ami-1", "ami-2"],
                type="string"
            ), NoCodeModuleVariableOptions(
                name="region",
                options=["us-east-1", "us-east-2", "us-west-1"],
                type="string"
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_no_code_module_foobar.override_logical_id("foobar")
```

## Argument Reference

The following arguments are supported:

- `name` - (Required) Name of the variable set.
- `organization` - (Optional) Name of the organization. If omitted, organization must be defined in the provider config.
- `registry_module` - (Required) The ID of the registry module to associate with the no code module.
- `enabled` - (Required) Whether or not no-code module is enabled for the associated registry module
- `version_pin` - (Optional) The version of the module to pin to.
- `variable_options` - (Optional) A list of variable options to associate with the no code module.
  - `name` - (Required) The name of the variable option.
  - `type` - (Required) The type of the variable option.
  - `options` - (Required) A list of options for the variable option.

## Attributes Reference

- `id` - The ID of the no code module.

## Import

No-code modules can be imported; use `<NO CODE MODULE ID>` as the import ID. For example:

```shell
terraform import tfe_no_code_module.test nocode-qV9JnKRkmtMa4zcA
```

<!-- cache-key: cdktf-0.20.8 input-1204d286dd93ad6b8890ea46ff233ae490bae459320c56bddd6dbe876dc0cdb5 -->