---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_registry_provider"
description: |-
  Manages public and private providers in the private registry.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_registry_provider

Manages public and private providers in the private registry.

## Example Usage

Create private provider:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_organization_example = tfe.organization.Organization(self, "example",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_registry_provider_example =
        tfe.registry_provider.RegistryProvider(self, "example_1",
            name="my-provider",
            organization=cdktf.Token.as_string(tfe_organization_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_registry_provider_example.override_logical_id("example")
```

Create public provider:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_organization_example = tfe.organization.Organization(self, "example",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_registry_provider_example =
        tfe.registry_provider.RegistryProvider(self, "example_1",
            name="aws",
            namespace="hashicorp",
            organization=cdktf.Token.as_string(tfe_organization_example.name),
            registry_name="public"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_registry_provider_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `organization` - (Optional) Name of the organization. If omitted, organization must be defined in the provider config.
* `registry_name` - (Optional) Whether this is a publicly maintained provider or private. Must be either `public` or `private`. Defaults to `private`.
* `namespace` - (Optional) The namespace of the provider. Required if `registry_name` is `public`, otherwise it can't be configured, and it will be set to same value as the `organization`.
* `name` - (Required) Name of the provider.

## Attributes Reference

* `id` - ID of the provider.
* `created_at` - The time when the provider was created.
* `updated_at` - The time when the provider was last updated.

## Import

Providers can be imported; use `<ORGANIZATION>/<REGISTRY NAME>/<NAMESPACE>/<PROVIDER NAME>` as the import ID.

For example a private provider:

```shell
terraform import tfe_registry_provider.example my-org-name/private/my-org-name/my-provider
```

Or a public provider:

```shell
terraform import tfe_registry_provider.example my-org-name/public/hashicorp/aws
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-0ebe64517a20c552e9e19b3841e4dc62744abf91b85e717ca41ba8858f1723cc -->