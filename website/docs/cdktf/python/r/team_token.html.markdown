---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_team_token"
description: |-
  Generates a new team token and overrides existing token if one exists.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_team_token

Generates a new team token. If a description is not set, then it follows the legacy behavior to override
the single team token without a description if it exists.

## Example Usage

Basic usage:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_team_test = tfe.team.Team(self, "test",
            name="my-team-name",
            organization="my-org-name"
        )
        tfe.team_token.TeamToken(self, "ci",
            description="my second team token",
            team_id=cdktf.Token.as_string(tfe_team_test.id)
        )
        tfe_team_token_test = tfe.team_token.TeamToken(self, "test_2",
            description="my team token",
            team_id=cdktf.Token.as_string(tfe_team_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_token_test.override_logical_id("test")
```

## Argument Reference

The following arguments are supported:

* `team_id` - (Required) ID of the team.
* `description` - (Optional) The token's description, which must be unique per team. Required if creating multiple
  tokens for a single team.
* `expired_at` - (Optional) The token's expiration date. The expiration date must be a date/time string in RFC3339 
format (e.g., "2024-12-31T23:59:59Z"). If no expiration date is supplied, the expiration date will default to null and 
never expire.
* `force_regenerate` - (Optional) Only applies to legacy tokens without descriptions. If set to `true`, a new
  token will be generated even if a token already exists. This will invalidate the existing token! This cannot
  be set with `description`.

## Example Usage

When a token has an expiry:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
import ...gen.providers.time as time
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: time.
        #     For a more precise conversion please use the --provider flag in convert.
        tfe_team_test = tfe.team.Team(self, "test",
            name="my-team-name",
            organization="my-org-name"
        )
        time_rotating_example = time.rotating.Rotating(self, "example",
            rotation_days=30
        )
        tfe_team_token_test = tfe.team_token.TeamToken(self, "test_2",
            description="my team token",
            expired_at=cdktf.Token.as_string(time_rotating_example.rotation_rfc3339),
            team_id=cdktf.Token.as_string(tfe_team_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_token_test.override_logical_id("test")
```

## Attributes Reference

* `id` - The ID of the token.
* `token` - The generated token.

## Import

Team tokens can be imported either by `<TOKEN ID>` or by `<TEAM ID>`. Using the team ID will follow the
legacy behavior where the imported token is the single token of the team that has no description.

For example:

```shell
terraform import tfe_team_token.test at-47qC3LmA47piVan7
terraform import tfe_team_token.test team-47qC3LmA47piVan7
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-292898c6eaed44c7a5d55942b397c8db6d933d9f88e258bb804dbd6e2a77157c -->