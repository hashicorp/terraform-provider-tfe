---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_team_notification_configuration"
description: |-
  Manages team notifications configurations.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_team_notification_configuration

HCP Terraform can be configured to send notifications to a team for certain events.
Team notification configurations allow you to specify a URL, destination type, and what events will trigger the notification.
Each team can have up to 20 notification configurations, and they apply to configured events for all workspaces that the configured team has access to.

## Example Usage

Basic usage:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.tfe.organization import Organization
from imports.tfe.team import Team
from imports.tfe.team_notification_configuration import TeamNotificationConfiguration
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = Organization(self, "test",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_team_test = Team(self, "test_1",
            name="my-team-name",
            organization=test.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_test.override_logical_id("test")
        tfe_team_notification_configuration_test =
        TeamNotificationConfiguration(self, "test_2",
            destination_type="generic",
            enabled=True,
            name="my-test-notification-configuration",
            team_id=Token.as_string(tfe_team_test.id),
            triggers=["change_request:created"],
            url="https://example.com"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_notification_configuration_test.override_logical_id("test")
```

With `destination_type` of `email`:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.tfe.data_tfe_organization_membership import DataTfeOrganizationMembership
from imports.tfe.organization import Organization
from imports.tfe.team import Team
from imports.tfe.team_notification_configuration import TeamNotificationConfiguration
from imports.tfe.team_organization_member import TeamOrganizationMember
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = Organization(self, "test",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_team_test = Team(self, "test_1",
            name="my-team-name",
            organization=test.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_test.override_logical_id("test")
        tfe_team_notification_configuration_test =
        TeamNotificationConfiguration(self, "test_2",
            destination_type="email",
            email_user_ids=[Token.as_string(tfe_organization_membership_test.user_id)],
            enabled=True,
            name="my-test-email-notification-configuration",
            team_id=Token.as_string(tfe_team_test.id),
            triggers=["change_request:created"]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_notification_configuration_test.override_logical_id("test")
        data_tfe_organization_membership_test = DataTfeOrganizationMembership(self, "test_3",
            email="example@example.com",
            organization=test.name
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_tfe_organization_membership_test.override_logical_id("test")
        tfe_team_organization_member_test = TeamOrganizationMember(self, "test_4",
            organization_membership_id=Token.as_string(data_tfe_organization_membership_test.id),
            team_id=Token.as_string(tfe_team_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_organization_member_test.override_logical_id("test")
```

(**TFE only**) With `destination_type` of `email`, using `email_addresses` list and `email_users`:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.tfe.data_tfe_organization_membership import DataTfeOrganizationMembership
from imports.tfe.organization import Organization
from imports.tfe.team import Team
from imports.tfe.team_notification_configuration import TeamNotificationConfiguration
from imports.tfe.team_organization_member import TeamOrganizationMember
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = Organization(self, "test",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_team_test = Team(self, "test_1",
            name="my-team-name",
            organization=test.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_test.override_logical_id("test")
        tfe_team_notification_configuration_test =
        TeamNotificationConfiguration(self, "test_2",
            destination_type="email",
            email_addresses=["user1@company.com", "user2@company.com", "user3@company.com"
            ],
            email_user_ids=[Token.as_string(tfe_organization_membership_test.user_id)],
            enabled=True,
            name="my-test-email-notification-configuration",
            team_id=Token.as_string(tfe_team_test.id),
            triggers=["change_request:created"]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_notification_configuration_test.override_logical_id("test")
        data_tfe_organization_membership_test = DataTfeOrganizationMembership(self, "test_3",
            email="example@example.com",
            organization=test.name
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_tfe_organization_membership_test.override_logical_id("test")
        tfe_team_organization_member_test = TeamOrganizationMember(self, "test_4",
            organization_membership_id=Token.as_string(data_tfe_organization_membership_test.id),
            team_id=Token.as_string(tfe_team_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_organization_member_test.override_logical_id("test")
```

## Argument Reference

The following arguments are supported:

- `name` - (Required) Name of the notification configuration.
- `destination_type` - (Required) The type of notification configuration payload to send.
  Valid values are:
  - `generic`
  - `email` available in HCP Terraform or Terraform Enterprise v202005-1 or later
  - `slack`
  - `microsoft-teams` available in HCP Terraform or Terraform Enterprise v202206-1 or later
- `team_id` - (Required) The ID of the team that owns the notification configuration.
- `url` - (Required if `destination_type` is `generic`, `microsoft-teams`, or `slack`) The HTTP or HTTPS URL of the notification configuration where notification requests will be made. This value _must not_ be provided if `destination_type` is `email`.
- `email_addresses` - (Optional) **TFE only** A list of email addresses. This value
  _must not_ be provided if `destination_type` is `generic`, `microsoft-teams`, or `slack`.
- `email_user_ids` - (Optional) A list of user IDs. This value _must not_ be provided
  if `destination_type` is `generic`, `microsoft-teams`, or `slack`.
- `enabled` - (Optional) Whether the notification configuration should be enabled or not.
  Disabled configurations will not send any notifications. Defaults to `false`.
- `token` - (Optional) A write-only secure token for the notification configuration, which can
  be used by the receiving server to verify request authenticity when configured for notification
  configurations with a destination type of `generic`. Defaults to `null`.
  This value _must not_ be provided if `destination_type` is `email`, `microsoft-teams`, or `slack`.
- `triggers` - (Optional) The array of triggers for which this notification configuration will
  send notifications. Currently, the only valid value is `change_request:created`.

## Attributes Reference

- `id` - The ID of the notification configuration.

## Import

Team notification configurations can be imported; use `<NOTIFICATION CONFIGURATION ID>` as the import ID. For example:

```shell
terraform import tfe_team_notification_configuration.test nc-qV9JnKRkmtMa4zcA
```

<!-- cache-key: cdktf-0.20.8 input-e19a07b2d6595b58e8595b5ac25d781ff68c58ce67d0af5d239cd0cd444484fa -->