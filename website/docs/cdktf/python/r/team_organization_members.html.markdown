---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_team_organization_members"
description: |-
  Add or remove users from a team based on their organization memberships.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_team_organization_members

Add or remove one or more team members using a
[tfe_organization_membership](organization_membership.html).

~> **NOTE** on managing team memberships: Terraform currently provides four
resources for managing team memberships. This - along with [tfe_team_organization_member](team_organization_member.html) - is the preferred method as it
allows you to add members to a team by email addresses. The [tfe_team_organization_member](team_organization_member.html) is used to manage a single team membership whereas [tfe_team_organization_members](team_organization_members.html) is used to manage all team memberships at once. All four resources cannot be used for the same team simultaneously.

~> **NOTE:** This resource requires using the provider with HCP Terraform or
an instance of Terraform Enterprise at least as recent as v202004-1.

## Example Usage

Basic usage:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.tfe.organization_membership import OrganizationMembership
from imports.tfe.team import Team
from imports.tfe.team_organization_members import TeamOrganizationMembers
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        sample = OrganizationMembership(self, "sample",
            email="sample@hashicorp.com",
            organization="my-org-name"
        )
        test = OrganizationMembership(self, "test",
            email="example@hashicorp.com",
            organization="my-org-name"
        )
        tfe_team_test = Team(self, "test_2",
            name="my-team-name",
            organization="my-org-name"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_test.override_logical_id("test")
        tfe_team_organization_members_test = TeamOrganizationMembers(self, "test_3",
            organization_membership_ids=[test.id, sample.id],
            team_id=Token.as_string(tfe_team_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_organization_members_test.override_logical_id("test")
```

With a set of organization members:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformIterator, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.tfe.organization_membership import OrganizationMembership
from imports.tfe.team import Team
from imports.tfe.team_organization_members import TeamOrganizationMembers
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        all_users = Fn.toset(["user1@hashicorp.com", "user2@hashicorp.com"])
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        all_membership_for_each_iterator = TerraformIterator.from_list(
            Token.as_any(all_users))
        OrganizationMembership(self, "all_membership",
            email=Token.as_string(all_membership_for_each_iterator.key),
            organization="my-org-name",
            for_each=all_membership_for_each_iterator
        )
        test = Team(self, "test",
            name="my-team-name",
            organization="my-org-name"
        )
        tfe_team_organization_members_test = TeamOrganizationMembers(self, "test_2",
            organization_membership_ids=Token.as_list("${[ for member in ${" + all_users + "} : tfe_organization_membership.all_membership[member].id]}"),
            team_id=test.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_team_organization_members_test.override_logical_id("test")
```

## Argument Reference

The following arguments are supported:

* `team_id` - (Required) ID of the team.
* `organization_membership_ids` - (Required) IDs of organization memberships to be added.

## Import

A resource can be imported by using the team ID `<TEAM ID>`
as the import ID. For example:

```shell
terraform import tfe_team_organization_members.test team-47qC3LmA47piVan7
```

<!-- cache-key: cdktf-0.20.8 input-641324e3bfad1336563feb20d81abd6386c5badfdeab86ffc533fda09946b35e -->