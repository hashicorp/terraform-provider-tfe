---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_variable_set"
description: |-
  Manages variable sets.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_variable_set

Creates, updates and destroys variable sets.

## Example Usage

Basic usage:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_organization_test = tfe.organization.Organization(self, "test",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_project_test = tfe.project.Project(self, "test_1",
            name="projectname",
            organization=cdktf.Token.as_string(tfe_organization_test.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_project_test.override_logical_id("test")
        tfe_variable_set_test = tfe.variable_set.VariableSet(self, "test_2",
            description="Some description.",
            name="Test Varset",
            organization=cdktf.Token.as_string(tfe_organization_test.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_variable_set_test.override_logical_id("test")
        tfe_workspace_test = tfe.workspace.Workspace(self, "test_3",
            name="my-workspace-name",
            organization=cdktf.Token.as_string(tfe_organization_test.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_workspace_test.override_logical_id("test")
        tfe_workspace_variable_set_test =
        tfe.workspace_variable_set.WorkspaceVariableSet(self, "test_4",
            variable_set_id=cdktf.Token.as_string(tfe_variable_set_test.id),
            workspace_id=cdktf.Token.as_string(tfe_workspace_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_workspace_variable_set_test.override_logical_id("test")
        tfe_project_variable_set_test =
        tfe.project_variable_set.ProjectVariableSet(self, "test_5",
            project_id=cdktf.Token.as_string(tfe_project_test.id),
            variable_set_id=cdktf.Token.as_string(tfe_variable_set_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_project_variable_set_test.override_logical_id("test")
        tfe.variable.Variable(self, "test-a",
            category="terraform",
            description="a useful description",
            key="seperate_variable",
            value="my_value_name",
            variable_set_id=cdktf.Token.as_string(tfe_variable_set_test.id)
        )
        tfe.variable.Variable(self, "test-b",
            category="env",
            description="an environment variable",
            key="another_variable",
            value="my_value_name",
            variable_set_id=cdktf.Token.as_string(tfe_variable_set_test.id)
        )
```

Creating a global variable set:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_organization_test = tfe.organization.Organization(self, "test",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_variable_set_test = tfe.variable_set.VariableSet(self, "test_1",
            description="Variable set applied to all workspaces.",
            global=True,
            name="Global Varset",
            organization=cdktf.Token.as_string(tfe_organization_test.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_variable_set_test.override_logical_id("test")
        tfe.variable.Variable(self, "test-a",
            category="terraform",
            description="a useful description",
            key="seperate_variable",
            value="my_value_name",
            variable_set_id=cdktf.Token.as_string(tfe_variable_set_test.id)
        )
        tfe.variable.Variable(self, "test-b",
            category="env",
            description="an environment variable",
            key="another_variable",
            value="my_value_name",
            variable_set_id=cdktf.Token.as_string(tfe_variable_set_test.id)
        )
```

Create a priority variable set:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_organization_test = tfe.organization.Organization(self, "test",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_variable_set_test = tfe.variable_set.VariableSet(self, "test_1",
            description="Variable set applied to all workspaces.",
            name="Global Varset",
            organization=cdktf.Token.as_string(tfe_organization_test.name),
            priority=True
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_variable_set_test.override_logical_id("test")
        tfe.variable.Variable(self, "test-a",
            category="terraform",
            description="a useful description",
            key="seperate_variable",
            value="my_value_name",
            variable_set_id=cdktf.Token.as_string(tfe_variable_set_test.id)
        )
        tfe.variable.Variable(self, "test-b",
            category="env",
            description="an environment variable",
            key="another_variable",
            value="my_value_name",
            variable_set_id=cdktf.Token.as_string(tfe_variable_set_test.id)
        )
```

Creating a project-owned variable set that is applied to all workspaces in the project:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_organization_test = tfe.organization.Organization(self, "test",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_project_test = tfe.project.Project(self, "test_1",
            name="projectname",
            organization=cdktf.Token.as_string(tfe_organization_test.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_project_test.override_logical_id("test")
        tfe_variable_set_test = tfe.variable_set.VariableSet(self, "test_2",
            description="Varset that is owned and managed by a project.",
            name="Project-owned Varset",
            organization=cdktf.Token.as_string(tfe_organization_test.name),
            parent_project_id=cdktf.Token.as_string(tfe_project_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_variable_set_test.override_logical_id("test")
        tfe_project_variable_set_test =
        tfe.project_variable_set.ProjectVariableSet(self, "test_3",
            project_id=cdktf.Token.as_string(tfe_project_test.id),
            variable_set_id=cdktf.Token.as_string(tfe_variable_set_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_project_variable_set_test.override_logical_id("test")
```

Creating a project-owned variable set that is applied to specific workspaces:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_organization_test = tfe.organization.Organization(self, "test",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_project_test = tfe.project.Project(self, "test_1",
            name="projectname",
            organization=cdktf.Token.as_string(tfe_organization_test.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_project_test.override_logical_id("test")
        tfe_variable_set_test = tfe.variable_set.VariableSet(self, "test_2",
            description="Varset that is owned and managed by a project.",
            name="Project-owned Varset",
            organization=cdktf.Token.as_string(tfe_organization_test.name),
            parent_project_id=cdktf.Token.as_string(tfe_project_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_variable_set_test.override_logical_id("test")
        tfe_workspace_test = tfe.workspace.Workspace(self, "test_3",
            name="my-workspace-name",
            organization=cdktf.Token.as_string(tfe_organization_test.name),
            project_id=cdktf.Token.as_string(tfe_project_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_workspace_test.override_logical_id("test")
        tfe_workspace_variable_set_test =
        tfe.workspace_variable_set.WorkspaceVariableSet(self, "test_4",
            variable_set_id=cdktf.Token.as_string(tfe_variable_set_test.id),
            workspace_id=cdktf.Token.as_string(tfe_workspace_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_workspace_variable_set_test.override_logical_id("test")
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Name of the variable set.
* `description` - (Optional) Description of the variable set.
* `global` - (Optional) Whether the variable set applies to all workspaces in the organization. Defaults to `false`.
* `priority` - (Optional) Whether the variables in this set can be over-written by more specific scopes including values set on the command line. Defaults to `false`.
* `organization` - (Optional) Name of the organization. If omitted, organization must be defined in the provider config.
* `workspace_ids` - **Deprecated** (Optional) IDs of the workspaces that use the variable set.
  Must not be set if `global` is set. This argument is mutually exclusive with using the resource
  [tfe_workspace_variable_set](workspace_variable_set.html) which is the preferred method of associating a workspace
  with a variable set.
* `parent_project_id` - (Optional) ID of the project that should own the variable set. If set, than the value of `global` must be `false`.
  To assign whether a variable set should be applied to a project, use the [`tfe_project_variable_set`](project_variable_set.html) resource.

## Attributes Reference

* `id` - The ID of the variable set.

## Import

Variable sets can be imported; use `<VARIABLE SET ID>` as the import ID. For example:

```shell
terraform import tfe_variable_set.test varset-5rTwnSaRPogw6apb
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-e43c37b8fda384ac825900c2a05dad46b7405306e02b1151313679fb612e7a61 -->