---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_variables"
description: |-
  Get information on a workspace variables.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: tfe_variables

This data source is used to retrieve all variables defined in a specified workspace

## Example Usage

For workspace variables:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.tfe.data_tfe_variables import DataTfeVariables
from imports.tfe.data_tfe_workspace import DataTfeWorkspace
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = DataTfeWorkspace(self, "test",
            name="my-workspace-name",
            organization="my-org-name"
        )
        data_tfe_variables_test = DataTfeVariables(self, "test_1",
            workspace_id=Token.as_string(test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_tfe_variables_test.override_logical_id("test")
```

For variable set variables:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.tfe.data_tfe_variable_set import DataTfeVariableSet
from imports.tfe.data_tfe_variables import DataTfeVariables
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = DataTfeVariableSet(self, "test",
            name="my-variable-set-name",
            organization="my-org-name"
        )
        data_tfe_variables_test = DataTfeVariables(self, "test_1",
            variable_set_id=Token.as_string(test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_tfe_variables_test.override_logical_id("test")
```

## Argument Reference

One of following arguments are required:

* `workspace_id` - ID of the workspace.
* `variable_set_id` - ID of the workspace.

## Attributes Reference

* `variables` - List containing all terraform and environment variables configured on the workspace
* `terraform` - List containing terraform variables configured on the workspace
* `env` - List containing environment variables configured on the workspace

The `variables, terraform and env` blocks contains:

* `id` - The variable Id
* `name` - The variable Key name
* `value` -  The variable value. If the variable is sensitive this value will be empty.
* `category` -  The category of the variable (terraform or environment)
* `sensitive` - If the variable is marked as sensitive or not
* `hcl` - If the variable is marked as HCL or not

<!-- cache-key: cdktf-0.20.8 input-635190fbcaed3640f0f12f181a3eae6abefebcbcad7f5806bfb392bb4097eaef -->