---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_no_code_module"
description: |-
  Get information on a no-code module.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: tfe_registry_provider

Use this data source to read the details of an existing No-Code-Allowed module.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.tfe.data_tfe_no_code_module import DataTfeNoCodeModule
from imports.tfe.no_code_module import NoCodeModule
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        foobar = NoCodeModule(self, "foobar",
            organization=Token.as_string(tfe_organization_foobar.id),
            registry_module=Token.as_string(tfe_registry_module_foobar.id)
        )
        data_tfe_no_code_module_foobar = DataTfeNoCodeModule(self, "foobar_1",
            id=foobar.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_tfe_no_code_module_foobar.override_logical_id("foobar")
```

## Argument Reference

The following arguments are supported:

* `id` - (Required) ID of the no-code module. 

## Attributes Reference

* `id` - ID of the no-code module.
* `organization` - Organization name that the no-code module belongs to.
* `namespace` - Namespace name that the no-code module belongs to.
* `registry_module_id` - ID of the registry module for the no-code module. 
* `version_pin` - Version number the no-code module is pinned to.
* `enabled` - Indicates if this no-code module is currently enabled

<!-- cache-key: cdktf-0.20.8 input-575fd9c85b909c532a6abcfecdf6262d4ba6675f544b4a4a3a15b6c519eab693 -->