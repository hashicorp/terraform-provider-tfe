---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_notification_configuration"
description: |-
  Manages notifications configurations.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_notification_configuration

HCP Terraform can be configured to send notifications for run state transitions.
Notification configurations allow you to specify a URL, destination type, and what events will trigger the notification.
Each workspace can have up to 20 notification configurations, and they apply to all runs for that workspace.


## Example Usage

Basic usage:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationTest = new Organization.Organization(this, "test", new OrganizationConfig {
            Email = "admin@company.com",
            Name = "my-org-name"
        });
        var tfeWorkspaceTest = new Workspace.Workspace(this, "test_1", new WorkspaceConfig {
            Name = "my-workspace-name",
            Organization = Token.AsString(tfeOrganizationTest.Id)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeWorkspaceTest.OverrideLogicalId("test");
        var tfeNotificationConfigurationTest =
        new NotificationConfiguration.NotificationConfiguration(this, "test_2", new NotificationConfigurationConfig {
            DestinationType = "generic",
            Enabled = true,
            Name = "my-test-notification-configuration",
            Triggers = new [] { "run:created", "run:planning", "run:errored" },
            Url = "https://example.com",
            WorkspaceId = Token.AsString(tfeWorkspaceTest.Id)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeNotificationConfigurationTest.OverrideLogicalId("test");
    }
}
```

With `DestinationType` of `Email`:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationTest = new Organization.Organization(this, "test", new OrganizationConfig {
            Email = "admin@company.com",
            Name = "my-org-name"
        });
        var tfeOrganizationMembershipTest =
        new OrganizationMembership.OrganizationMembership(this, "test_1", new OrganizationMembershipConfig {
            Email = "test.member@company.com",
            Organization = "my-org-name"
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeOrganizationMembershipTest.OverrideLogicalId("test");
        var tfeWorkspaceTest = new Workspace.Workspace(this, "test_2", new WorkspaceConfig {
            Name = "my-workspace-name",
            Organization = Token.AsString(tfeOrganizationTest.Id)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeWorkspaceTest.OverrideLogicalId("test");
        var tfeNotificationConfigurationTest =
        new NotificationConfiguration.NotificationConfiguration(this, "test_3", new NotificationConfigurationConfig {
            DestinationType = "email",
            EmailUserIds = new [] { Token.AsString(tfeOrganizationMembershipTest.UserId) },
            Enabled = true,
            Name = "my-test-email-notification-configuration",
            Triggers = new [] { "run:created", "run:planning", "run:errored" },
            WorkspaceId = Token.AsString(tfeWorkspaceTest.Id)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeNotificationConfigurationTest.OverrideLogicalId("test");
    }
}
```

(**TFE only**) With `DestinationType` of `Email`, using `EmailAddresses` list and `EmailUsers`:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationTest = new Organization.Organization(this, "test", new OrganizationConfig {
            Email = "admin@company.com",
            Name = "my-org-name"
        });
        var tfeOrganizationMembershipTest =
        new OrganizationMembership.OrganizationMembership(this, "test_1", new OrganizationMembershipConfig {
            Email = "test.member@company.com",
            Organization = "my-org-name"
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeOrganizationMembershipTest.OverrideLogicalId("test");
        var tfeWorkspaceTest = new Workspace.Workspace(this, "test_2", new WorkspaceConfig {
            Name = "my-workspace-name",
            Organization = Token.AsString(tfeOrganizationTest.Id)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeWorkspaceTest.OverrideLogicalId("test");
        var tfeNotificationConfigurationTest =
        new NotificationConfiguration.NotificationConfiguration(this, "test_3", new NotificationConfigurationConfig {
            DestinationType = "email",
            EmailAddresses = new [] { "user1@company.com", "user2@company.com", "user3@company.com" },
            EmailUserIds = new [] { Token.AsString(tfeOrganizationMembershipTest.UserId) },
            Enabled = true,
            Name = "my-test-email-notification-configuration",
            Triggers = new [] { "run:created", "run:planning", "run:errored" },
            WorkspaceId = Token.AsString(tfeWorkspaceTest.Id)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeNotificationConfigurationTest.OverrideLogicalId("test");
    }
}
```

## Argument Reference

The following arguments are supported:

* `Name` - (Required) Name of the notification configuration.
* `DestinationType` - (Required) The type of notification configuration payload to send.
  Valid values are:
  * `Generic`
  * `Email` available in HCP Terraform or Terraform Enterprise v202005-1 or later
  * `Slack`
  * `MicrosoftTeams` available in HCP Terraform or Terraform Enterprise v202206-1 or later
* `EmailAddresses` - (Optional) **TFE only** A list of email addresses. This value
  _must not_ be provided if `DestinationType` is `Generic`, `MicrosoftTeams`, or `Slack`.
* `EmailUserIds` - (Optional) A list of user IDs. This value _must not_ be provided
  if `DestinationType` is `Generic`, `MicrosoftTeams`, or `Slack`.
* `Enabled` - (Optional) Whether the notification configuration should be enabled or not.
  Disabled configurations will not send any notifications. Defaults to `False`.
* `Token` - (Optional) A write-only secure token for the notification configuration, which can
  be used by the receiving server to verify request authenticity when configured for notification
  configurations with a destination type of `Generic`. Defaults to `Null`.
  This value _must not_ be provided if `DestinationType` is `Email`, `MicrosoftTeams`, or `Slack`.
* `Triggers` - (Optional) The array of triggers for which this notification configuration will
  send notifications. Valid values are `Run:created`, `Run:planning`, `Run:needsAttention`, `Run:applying`
  `Run:completed`, `Run:errored`, `Assessment:checkFailure`, `Assessment:drifted`, `Assessment:failed`, `Workspace:autoDestroyReminder`, or `Workspace:autoDestroyRunResults`.
  If omitted, no notification triggers are configured.
* `Url` - (Required if `DestinationType` is `Generic`, `MicrosoftTeams`, or `Slack`) The HTTP or HTTPS URL of the notification
  configuration where notification requests will be made. This value _must not_ be provided if `DestinationType`
  is `Email`.
* `WorkspaceId` - (Required) The id of the workspace that owns the notification configuration.

## Attributes Reference

* `Id` - The ID of the notification configuration.

## Import

Notification configurations can be imported; use `<NOTIFICATION CONFIGURATION ID>` as the import ID. For example:

```shell
terraform import tfe_notification_configuration.test nc-qV9JnKRkmtMa4zcA
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-710b7782960f76dfa6c0cc90313ce4411ea1070e9620f03dafea7305849d1d27 -->