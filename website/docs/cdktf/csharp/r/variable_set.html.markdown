---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_variable_set"
description: |-
  Manages variable sets.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_variable_set

Creates, updates and destroys variable sets.

## Example Usage

Basic usage:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationTest = new Organization.Organization(this, "test", new OrganizationConfig {
            Email = "admin@company.com",
            Name = "my-org-name"
        });
        var tfeProjectTest = new Project.Project(this, "test_1", new ProjectConfig {
            Name = "projectname",
            Organization = Token.AsString(tfeOrganizationTest.Name)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeProjectTest.OverrideLogicalId("test");
        var tfeVariableSetTest = new VariableSet.VariableSet(this, "test_2", new VariableSetConfig {
            Description = "Some description.",
            Name = "Test Varset",
            Organization = Token.AsString(tfeOrganizationTest.Name)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeVariableSetTest.OverrideLogicalId("test");
        var tfeWorkspaceTest = new Workspace.Workspace(this, "test_3", new WorkspaceConfig {
            Name = "my-workspace-name",
            Organization = Token.AsString(tfeOrganizationTest.Name)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeWorkspaceTest.OverrideLogicalId("test");
        var tfeWorkspaceVariableSetTest =
        new WorkspaceVariableSet.WorkspaceVariableSet(this, "test_4", new WorkspaceVariableSetConfig {
            VariableSetId = Token.AsString(tfeVariableSetTest.Id),
            WorkspaceId = Token.AsString(tfeWorkspaceTest.Id)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeWorkspaceVariableSetTest.OverrideLogicalId("test");
        var tfeProjectVariableSetTest =
        new ProjectVariableSet.ProjectVariableSet(this, "test_5", new ProjectVariableSetConfig {
            ProjectId = Token.AsString(tfeProjectTest.Id),
            VariableSetId = Token.AsString(tfeVariableSetTest.Id)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeProjectVariableSetTest.OverrideLogicalId("test");
        new Variable.Variable(this, "test-a", new VariableConfig {
            Category = "terraform",
            Description = "a useful description",
            Key = "seperate_variable",
            Value = "my_value_name",
            VariableSetId = Token.AsString(tfeVariableSetTest.Id)
        });
        new Variable.Variable(this, "test-b", new VariableConfig {
            Category = "env",
            Description = "an environment variable",
            Key = "another_variable",
            Value = "my_value_name",
            VariableSetId = Token.AsString(tfeVariableSetTest.Id)
        });
    }
}
```

Creating a global variable set:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationTest = new Organization.Organization(this, "test", new OrganizationConfig {
            Email = "admin@company.com",
            Name = "my-org-name"
        });
        var tfeVariableSetTest = new VariableSet.VariableSet(this, "test_1", new VariableSetConfig {
            Description = "Variable set applied to all workspaces.",
            Global = true,
            Name = "Global Varset",
            Organization = Token.AsString(tfeOrganizationTest.Name)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeVariableSetTest.OverrideLogicalId("test");
        new Variable.Variable(this, "test-a", new VariableConfig {
            Category = "terraform",
            Description = "a useful description",
            Key = "seperate_variable",
            Value = "my_value_name",
            VariableSetId = Token.AsString(tfeVariableSetTest.Id)
        });
        new Variable.Variable(this, "test-b", new VariableConfig {
            Category = "env",
            Description = "an environment variable",
            Key = "another_variable",
            Value = "my_value_name",
            VariableSetId = Token.AsString(tfeVariableSetTest.Id)
        });
    }
}
```

Create a priority variable set:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationTest = new Organization.Organization(this, "test", new OrganizationConfig {
            Email = "admin@company.com",
            Name = "my-org-name"
        });
        var tfeVariableSetTest = new VariableSet.VariableSet(this, "test_1", new VariableSetConfig {
            Description = "Variable set applied to all workspaces.",
            Name = "Global Varset",
            Organization = Token.AsString(tfeOrganizationTest.Name),
            Priority = true
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeVariableSetTest.OverrideLogicalId("test");
        new Variable.Variable(this, "test-a", new VariableConfig {
            Category = "terraform",
            Description = "a useful description",
            Key = "seperate_variable",
            Value = "my_value_name",
            VariableSetId = Token.AsString(tfeVariableSetTest.Id)
        });
        new Variable.Variable(this, "test-b", new VariableConfig {
            Category = "env",
            Description = "an environment variable",
            Key = "another_variable",
            Value = "my_value_name",
            VariableSetId = Token.AsString(tfeVariableSetTest.Id)
        });
    }
}
```

Creating a project-owned variable set that is applied to all workspaces in the project:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationTest = new Organization.Organization(this, "test", new OrganizationConfig {
            Email = "admin@company.com",
            Name = "my-org-name"
        });
        var tfeProjectTest = new Project.Project(this, "test_1", new ProjectConfig {
            Name = "projectname",
            Organization = Token.AsString(tfeOrganizationTest.Name)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeProjectTest.OverrideLogicalId("test");
        var tfeVariableSetTest = new VariableSet.VariableSet(this, "test_2", new VariableSetConfig {
            Description = "Varset that is owned and managed by a project.",
            Name = "Project-owned Varset",
            Organization = Token.AsString(tfeOrganizationTest.Name),
            ParentProjectId = Token.AsString(tfeProjectTest.Id)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeVariableSetTest.OverrideLogicalId("test");
        var tfeProjectVariableSetTest =
        new ProjectVariableSet.ProjectVariableSet(this, "test_3", new ProjectVariableSetConfig {
            ProjectId = Token.AsString(tfeProjectTest.Id),
            VariableSetId = Token.AsString(tfeVariableSetTest.Id)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeProjectVariableSetTest.OverrideLogicalId("test");
    }
}
```

Creating a project-owned variable set that is applied to specific workspaces:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationTest = new Organization.Organization(this, "test", new OrganizationConfig {
            Email = "admin@company.com",
            Name = "my-org-name"
        });
        var tfeProjectTest = new Project.Project(this, "test_1", new ProjectConfig {
            Name = "projectname",
            Organization = Token.AsString(tfeOrganizationTest.Name)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeProjectTest.OverrideLogicalId("test");
        var tfeVariableSetTest = new VariableSet.VariableSet(this, "test_2", new VariableSetConfig {
            Description = "Varset that is owned and managed by a project.",
            Name = "Project-owned Varset",
            Organization = Token.AsString(tfeOrganizationTest.Name),
            ParentProjectId = Token.AsString(tfeProjectTest.Id)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeVariableSetTest.OverrideLogicalId("test");
        var tfeWorkspaceTest = new Workspace.Workspace(this, "test_3", new WorkspaceConfig {
            Name = "my-workspace-name",
            Organization = Token.AsString(tfeOrganizationTest.Name),
            ProjectId = Token.AsString(tfeProjectTest.Id)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeWorkspaceTest.OverrideLogicalId("test");
        var tfeWorkspaceVariableSetTest =
        new WorkspaceVariableSet.WorkspaceVariableSet(this, "test_4", new WorkspaceVariableSetConfig {
            VariableSetId = Token.AsString(tfeVariableSetTest.Id),
            WorkspaceId = Token.AsString(tfeWorkspaceTest.Id)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeWorkspaceVariableSetTest.OverrideLogicalId("test");
    }
}
```

## Argument Reference

The following arguments are supported:

* `Name` - (Required) Name of the variable set.
* `Description` - (Optional) Description of the variable set.
* `Global` - (Optional) Whether the variable set applies to all workspaces in the organization. Defaults to `False`.
* `Priority` - (Optional) Whether the variables in this set can be over-written by more specific scopes including values set on the command line. Defaults to `False`.
* `Organization` - (Optional) Name of the organization. If omitted, organization must be defined in the provider config.
* `WorkspaceIds` - **Deprecated** (Optional) IDs of the workspaces that use the variable set.
  Must not be set if `Global` is set. This argument is mutually exclusive with using the resource
  [tfe_workspace_variable_set](workspace_variable_set.html) which is the preferred method of associating a workspace
  with a variable set.
* `ParentProjectId` - (Optional) ID of the project that should own the variable set. If set, than the value of `Global` must be `False`.
  To assign whether a variable set should be applied to a project, use the [`TfeProjectVariableSet`](project_variable_set.html) resource.

## Attributes Reference

* `Id` - The ID of the variable set.

## Import

Variable sets can be imported; use `<VARIABLE SET ID>` as the import ID. For example:

```shell
terraform import tfe_variable_set.test varset-5rTwnSaRPogw6apb
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-e43c37b8fda384ac825900c2a05dad46b7405306e02b1151313679fb612e7a61 -->