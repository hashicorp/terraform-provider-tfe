---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_variable"
description: |-
  Manages variables.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_variable

Creates, updates and destroys variables.

## Example Usage

Basic usage for workspaces:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Organization } from "./.gen/providers/tfe/organization";
import { Variable } from "./.gen/providers/tfe/variable";
import { Workspace } from "./.gen/providers/tfe/workspace";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new Organization(this, "test", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const tfeWorkspaceTest = new Workspace(this, "test_1", {
      name: "my-workspace-name",
      organization: test.name,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeWorkspaceTest.overrideLogicalId("test");
    const tfeVariableTest = new Variable(this, "test_2", {
      category: "terraform",
      description: "a useful description",
      key: "my_key_name",
      value: "my_value_name",
      workspaceId: Token.asString(tfeWorkspaceTest.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeVariableTest.overrideLogicalId("test");
  }
}

```

Basic usage for variable sets:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Organization } from "./.gen/providers/tfe/organization";
import { Variable } from "./.gen/providers/tfe/variable";
import { VariableSet } from "./.gen/providers/tfe/variable-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new Organization(this, "test", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const tfeVariableSetTest = new VariableSet(this, "test_1", {
      description: "Some description.",
      global: false,
      name: "Test Varset",
      organization: test.name,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeVariableSetTest.overrideLogicalId("test");
    new Variable(this, "test-a", {
      category: "terraform",
      description: "a useful description",
      key: "seperate_variable",
      value: "my_value_name",
      variableSetId: Token.asString(tfeVariableSetTest.id),
    });
    new Variable(this, "test-b", {
      category: "env",
      description: "an environment variable",
      key: "another_variable",
      value: "my_value_name",
      variableSetId: Token.asString(tfeVariableSetTest.id),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `key` - (Required) Name of the variable.
* `value` - (Required) Value of the variable.
* `category` - (Required) Whether this is a Terraform or environment variable.
  Valid values are `terraform` or `env`.
* `description` - (Optional) Description of the variable.
* `hcl` - (Optional) Whether to evaluate the value of the variable as a string
  of HCL code. Has no effect for environment variables. Defaults to `false`.
* `sensitive` - (Optional) Whether the value is sensitive. If true then the
variable is written once and not visible thereafter. Defaults to `false`.
* One of the following (Required)
    * `workspaceId` - ID of the workspace that owns the variable.
    * `variableSetId` - ID of the variable set that owns the variable.

~> **NOTE:** When `sensitive` is set to true, Terraform cannot detect and repair
drift if `value` is later changed out-of-band via the HCP Terraform UI.
Terraform will only change the value for a sensitive variable if you change
`value` in the configuration, so that it no longer matches the last known value
in the state.

## Attributes Reference

* `id` - The ID of the variable.
* `readableValue` - Only present if the variable is non-sensitive. A copy of the value which will not be marked as sensitive in plan outputs.

### Using readable_value

While the `value` field may be referenced in other resources, for safety it is always treated as sensitive. This means that it will always be redacted from plan outputs, and any other resource attributes which depend on it will also be redacted.

The `readableValue` attribute is not sensitive, and will not be redacted; instead, it will be null if the variable is sensitive. This allows other resources to reference it, while keeping their plan outputs readable.

For example:
```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Variable } from "./.gen/providers/tfe/variable";
import { Workspace } from "./.gen/providers/tfe/workspace";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const sensitiveVar = new Variable(this, "sensitive_var", {
      category: "terraform",
      key: "sensitive_key",
      sensitive: true,
      value: "sensitive_value",
      workspaceId: workspace.id,
    });
    const visibleVar = new Variable(this, "visible_var", {
      category: "terraform",
      key: "visible_key",
      sensitive: false,
      value: "visible_value",
      workspaceId: workspace.id,
    });
    new Workspace(this, "sensitive_workspace", {
      name: "workspace-${" + sensitiveVar.value + "}",
      organization: "organization name",
    });
    new Workspace(this, "visible_workspace", {
      name: "workspace-${" + visibleVar.readableValue + "}",
      organization: "organization name",
    });
  }
}

```

`readableValue` will be null if the variable is sensitive. `readableValue` may not be set explicitly in the resource configuration.


## Import

Variables can be imported.

To import a variable that's part of a workspace, use
`<ORGANIZATION NAME>/<WORKSPACE NAME>/<VARIABLE ID>` as the import ID. For
example:

```shell
terraform import tfe_variable.test my-org-name/my-workspace-name/var-5rTwnSaRPogw6apb
```

To import a variable that's part of a variable set, use
`<ORGANIZATION NAME>/<VARIABLE SET ID>/<VARIABLE ID>` as the import ID. For
example:

```shell
terraform import tfe_variable.test my-org-name/varset-47qC3LmA47piVan7/var-5rTwnSaRPogw6apb
```

<!-- cache-key: cdktf-0.20.8 input-820a46294ad3c295e8c8e473e6b35e04caffa032e0ef22d9cdce3378630f170e -->