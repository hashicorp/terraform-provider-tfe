---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_variable_set"
description: |-
  Manages variable sets.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_variable_set

Creates, updates and destroys variable sets.

## Example Usage

Basic usage:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Organization } from "./.gen/providers/tfe/organization";
import { Project } from "./.gen/providers/tfe/project";
import { ProjectVariableSet } from "./.gen/providers/tfe/project-variable-set";
import { Variable } from "./.gen/providers/tfe/variable";
import { VariableSet } from "./.gen/providers/tfe/variable-set";
import { Workspace } from "./.gen/providers/tfe/workspace";
import { WorkspaceVariableSet } from "./.gen/providers/tfe/workspace-variable-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new Organization(this, "test", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const tfeProjectTest = new Project(this, "test_1", {
      name: "projectname",
      organization: test.name,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeProjectTest.overrideLogicalId("test");
    const tfeVariableSetTest = new VariableSet(this, "test_2", {
      description: "Some description.",
      name: "Test Varset",
      organization: test.name,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeVariableSetTest.overrideLogicalId("test");
    const tfeWorkspaceTest = new Workspace(this, "test_3", {
      name: "my-workspace-name",
      organization: test.name,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeWorkspaceTest.overrideLogicalId("test");
    const tfeWorkspaceVariableSetTest = new WorkspaceVariableSet(
      this,
      "test_4",
      {
        variableSetId: Token.asString(tfeVariableSetTest.id),
        workspaceId: Token.asString(tfeWorkspaceTest.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeWorkspaceVariableSetTest.overrideLogicalId("test");
    const tfeProjectVariableSetTest = new ProjectVariableSet(this, "test_5", {
      projectId: Token.asString(tfeProjectTest.id),
      variableSetId: Token.asString(tfeVariableSetTest.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeProjectVariableSetTest.overrideLogicalId("test");
    new Variable(this, "test-a", {
      category: "terraform",
      description: "a useful description",
      key: "seperate_variable",
      value: "my_value_name",
      variableSetId: Token.asString(tfeVariableSetTest.id),
    });
    new Variable(this, "test-b", {
      category: "env",
      description: "an environment variable",
      key: "another_variable",
      value: "my_value_name",
      variableSetId: Token.asString(tfeVariableSetTest.id),
    });
  }
}

```

Creating a global variable set:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Organization } from "./.gen/providers/tfe/organization";
import { Variable } from "./.gen/providers/tfe/variable";
import { VariableSet } from "./.gen/providers/tfe/variable-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new Organization(this, "test", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const tfeVariableSetTest = new VariableSet(this, "test_1", {
      description: "Variable set applied to all workspaces.",
      global: true,
      name: "Global Varset",
      organization: test.name,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeVariableSetTest.overrideLogicalId("test");
    new Variable(this, "test-a", {
      category: "terraform",
      description: "a useful description",
      key: "seperate_variable",
      value: "my_value_name",
      variableSetId: Token.asString(tfeVariableSetTest.id),
    });
    new Variable(this, "test-b", {
      category: "env",
      description: "an environment variable",
      key: "another_variable",
      value: "my_value_name",
      variableSetId: Token.asString(tfeVariableSetTest.id),
    });
  }
}

```

Create a priority variable set:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Organization } from "./.gen/providers/tfe/organization";
import { Variable } from "./.gen/providers/tfe/variable";
import { VariableSet } from "./.gen/providers/tfe/variable-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new Organization(this, "test", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const tfeVariableSetTest = new VariableSet(this, "test_1", {
      description: "Variable set applied to all workspaces.",
      name: "Global Varset",
      organization: test.name,
      priority: true,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeVariableSetTest.overrideLogicalId("test");
    new Variable(this, "test-a", {
      category: "terraform",
      description: "a useful description",
      key: "seperate_variable",
      value: "my_value_name",
      variableSetId: Token.asString(tfeVariableSetTest.id),
    });
    new Variable(this, "test-b", {
      category: "env",
      description: "an environment variable",
      key: "another_variable",
      value: "my_value_name",
      variableSetId: Token.asString(tfeVariableSetTest.id),
    });
  }
}

```

Creating a project-owned variable set that is applied to all workspaces in the project:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Organization } from "./.gen/providers/tfe/organization";
import { Project } from "./.gen/providers/tfe/project";
import { ProjectVariableSet } from "./.gen/providers/tfe/project-variable-set";
import { VariableSet } from "./.gen/providers/tfe/variable-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new Organization(this, "test", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const tfeProjectTest = new Project(this, "test_1", {
      name: "projectname",
      organization: test.name,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeProjectTest.overrideLogicalId("test");
    const tfeVariableSetTest = new VariableSet(this, "test_2", {
      description: "Varset that is owned and managed by a project.",
      name: "Project-owned Varset",
      organization: test.name,
      parentProjectId: Token.asString(tfeProjectTest.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeVariableSetTest.overrideLogicalId("test");
    const tfeProjectVariableSetTest = new ProjectVariableSet(this, "test_3", {
      projectId: Token.asString(tfeProjectTest.id),
      variableSetId: Token.asString(tfeVariableSetTest.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeProjectVariableSetTest.overrideLogicalId("test");
  }
}

```

Creating a project-owned variable set that is applied to specific workspaces:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Organization } from "./.gen/providers/tfe/organization";
import { Project } from "./.gen/providers/tfe/project";
import { VariableSet } from "./.gen/providers/tfe/variable-set";
import { Workspace } from "./.gen/providers/tfe/workspace";
import { WorkspaceVariableSet } from "./.gen/providers/tfe/workspace-variable-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new Organization(this, "test", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const tfeProjectTest = new Project(this, "test_1", {
      name: "projectname",
      organization: test.name,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeProjectTest.overrideLogicalId("test");
    const tfeVariableSetTest = new VariableSet(this, "test_2", {
      description: "Varset that is owned and managed by a project.",
      name: "Project-owned Varset",
      organization: test.name,
      parentProjectId: Token.asString(tfeProjectTest.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeVariableSetTest.overrideLogicalId("test");
    const tfeWorkspaceTest = new Workspace(this, "test_3", {
      name: "my-workspace-name",
      organization: test.name,
      projectId: Token.asString(tfeProjectTest.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeWorkspaceTest.overrideLogicalId("test");
    const tfeWorkspaceVariableSetTest = new WorkspaceVariableSet(
      this,
      "test_4",
      {
        variableSetId: Token.asString(tfeVariableSetTest.id),
        workspaceId: Token.asString(tfeWorkspaceTest.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeWorkspaceVariableSetTest.overrideLogicalId("test");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Name of the variable set.
* `description` - (Optional) Description of the variable set.
* `global` - (Optional) Whether the variable set applies to all workspaces in the organization. Defaults to `false`.
* `priority` - (Optional) Whether the variables in this set can be over-written by more specific scopes including values set on the command line. Defaults to `false`.
* `organization` - (Optional) Name of the organization. If omitted, organization must be defined in the provider config.
* `workspaceIds` - **Deprecated** (Optional) IDs of the workspaces that use the variable set.
  Must not be set if `global` is set. This argument is mutually exclusive with using the resource
  [tfe_workspace_variable_set](workspace_variable_set.html) which is the preferred method of associating a workspace
  with a variable set.
* `parentProjectId` - (Optional) ID of the project that should own the variable set. If set, than the value of `global` must be `false`.
  To assign whether a variable set should be applied to a project, use the [`tfe_project_variable_set`](project_variable_set.html) resource.

## Attributes Reference

* `id` - The ID of the variable set.

## Import

Variable sets can be imported; use `<VARIABLE SET ID>` as the import ID. For example:

```shell
terraform import tfe_variable_set.test varset-5rTwnSaRPogw6apb
```

<!-- cache-key: cdktf-0.20.8 input-e43c37b8fda384ac825900c2a05dad46b7405306e02b1151313679fb612e7a61 -->