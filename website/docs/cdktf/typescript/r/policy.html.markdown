---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_policy"
description: |-
  Manages policies.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_policy

Policies are rules enforced on Terraform runs. You can use policies to validate that the Terraform plan complies with security rules and best practices.
Two policy-as-code frameworks are integrated with Terraform Enterprise: Sentinel and Open Policy Agent (OPA).

Policies are configured on a per-organization level and are organized and
grouped into policy sets, which define the workspaces on which policies are
enforced during runs.

## Example Usage

Basic usage for Sentinel:

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as tfe from "./.gen/providers/tfe";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new tfe.policy.Policy(this, "test", {
      description: "This policy always passes",
      enforceMode: "hard-mandatory",
      kind: "sentinel",
      name: "my-policy-name",
      organization: "my-org-name",
      policy: "main = rule { true }",
    });
  }
}

```

Basic usage for Open Policy Agent(OPA):

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as tfe from "./.gen/providers/tfe";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new tfe.policy.Policy(this, "test", {
      description: "This policy always passes",
      enforceMode: "mandatory",
      kind: "opa",
      name: "my-policy-name",
      organization: "my-org-name",
      policy: 'package example rule[\\"not allowed\\"] { false }',
      query: "data.example.rule",
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Name of the policy.
* `description` - (Optional) A description of the policy's purpose.
* `organization` - (Optional) Name of the organization. If omitted, organization must be defined in the provider config.
* `kind` - (Optional) The policy-as-code framework associated with the policy.
   Defaults to `sentinel` if not provided. Valid values are `sentinel` and `opa`.
* `query` - (Optional) The OPA query to identify a specific policy rule that
   needs to run within your Rego code. Required for all OPA policies.
* `policy` - (Required) The actual policy itself.
* `enforceMode` - (Optional) The enforcement level of the policy. Valid
  values for Sentinel are `advisory`, `hardMandatory` and `softMandatory`. Defaults
  to `softMandatory`. Valid values for OPA are `advisory` and `mandatory`. Defaults
  to `advisory`.

## Attributes Reference

* `id` - The ID of the policy.

## Import

Policies can be imported; use `<ORGANIZATION NAME>/<POLICY ID>` as the
import ID. For example:

```shell
terraform import tfe_policy.test my-org-name/pol-wAs3zYmWAhYK7peR
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ea229695faa93801409757c25356cacdfc7085cbdb339121ab75a922171703db -->