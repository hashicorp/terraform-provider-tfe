---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_workspace_setting"
description: |-
  Manages workspace settings.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_workspace_settings

~> **NOTE:** Manages or reads execution mode and agent pool settings for a workspace. This also interacts with the organization's default values for several settings, which can be managed with [tfe_organization_default_settings](organization_default_settings.html). If other resources need to identify whether a setting is a default or an explicit value set for the workspace, you can refer to the read-only `overwrites` argument.

~> **NOTE:** This resource manages values that can alternatively be managed by the  `tfe_workspace` resource. You should not attempt to manage the same property on both resources which could cause a permanent drift. Example properties available on both resources: `description`, `tags`, `autoApply`, etc.

## Example Usage

Basic usage:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Organization } from "./.gen/providers/tfe/organization";
import { Workspace } from "./.gen/providers/tfe/workspace";
import { WorkspaceSettings } from "./.gen/providers/tfe/workspace-settings";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const testOrganization = new Organization(this, "test-organization", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const test = new Workspace(this, "test", {
      name: "my-workspace-name",
      organization: testOrganization.name,
    });
    new WorkspaceSettings(this, "test-settings", {
      executionMode: "local",
      workspaceId: test.id,
    });
  }
}

```

With `executionMode` of `agent`:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AgentPool } from "./.gen/providers/tfe/agent-pool";
import { AgentPoolAllowedWorkspaces } from "./.gen/providers/tfe/agent-pool-allowed-workspaces";
import { Organization } from "./.gen/providers/tfe/organization";
import { Workspace } from "./.gen/providers/tfe/workspace";
import { WorkspaceSettings } from "./.gen/providers/tfe/workspace-settings";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const testOrganization = new Organization(this, "test-organization", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const test = new Workspace(this, "test", {
      name: "my-workspace-name",
      organization: testOrganization.name,
    });
    const testAgentPool = new AgentPool(this, "test-agent-pool", {
      name: "my-agent-pool-name",
      organization: testOrganization.name,
    });
    const tfeAgentPoolAllowedWorkspacesTest = new AgentPoolAllowedWorkspaces(
      this,
      "test_3",
      {
        agentPoolId: testAgentPool.id,
        allowedWorkspaceIds: [test.id],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeAgentPoolAllowedWorkspacesTest.overrideLogicalId("test");
    new WorkspaceSettings(this, "test-settings", {
      agentPoolId: Token.asString(
        tfeAgentPoolAllowedWorkspacesTest.agentPoolId
      ),
      executionMode: "agent",
      workspaceId: test.id,
    });
  }
}

```

Using `remoteStateConsumerIds`:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import {
  Fn,
  Token,
  TerraformIterator,
  Op,
  conditional,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Workspace } from "./.gen/providers/tfe/workspace";
import { WorkspaceSettings } from "./.gen/providers/tfe/workspace-settings";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const testForEachIterator = TerraformIterator.fromList(
      Token.asAny(Fn.toset(["qa", "production"]))
    );
    const test = new Workspace(this, "test", {
      name: "${" + testForEachIterator.value + "}-test",
      forEach: testForEachIterator,
    });
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const testSettingsForEachIterator = TerraformIterator.fromList(
      Token.asAny(Fn.toset(["qa", "production"]))
    );
    new WorkspaceSettings(this, "test-settings", {
      globalRemoteState: false,
      remoteStateConsumerIds: Token.asList(
        Fn.toset(
          Fn.compact(
            Token.asList([
              conditional(
                Op.eq(testSettingsForEachIterator.value, "production"),
                Fn.lookupNested(test, ['"qa"', "id"]),
                ""
              ),
            ])
          )
        )
      ),
      workspaceId: Token.asString(
        Fn.lookupNested(
          Fn.lookupNested(test, [testSettingsForEachIterator.value]),
          ["id"]
        )
      ),
      forEach: testSettingsForEachIterator,
    });
  }
}

```

This resource may be used as a data source when no optional arguments are defined:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformOutput, Op, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataTfeWorkspace } from "./.gen/providers/tfe/data-tfe-workspace";
import { WorkspaceSettings } from "./.gen/providers/tfe/workspace-settings";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new DataTfeWorkspace(this, "test", {
      name: "my-workspace-name",
      organization: "my-org-name",
    });
    const tfeWorkspaceSettingsTest = new WorkspaceSettings(this, "test_1", {
      workspaceId: Token.asString(test.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeWorkspaceSettingsTest.overrideLogicalId("test");
    new TerraformOutput(this, "workspace-explicit-local-execution", {
      value: Fn.alltrue(
        Token.asAny([
          Op.eq(tfeWorkspaceSettingsTest.executionMode, "local"),
          Fn.lookupNested(tfeWorkspaceSettingsTest.overwrites, [
            "0",
            '"execution_mode"',
          ]),
        ])
      ),
    });
  }
}

```

This resource can be used to self manage a workspace created from `terraform init` and a cloud block:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataTfeWorkspace } from "./.gen/providers/tfe/data-tfe-workspace";
import { WorkspaceSettings } from "./.gen/providers/tfe/workspace-settings";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const self = new DataTfeWorkspace(this, "self", {
      name: Token.asString(
        Fn.lookupNested(Fn.split("/", tfcWorkspaceSlug.stringValue), ["1"])
      ),
      organization: Token.asString(
        Fn.lookupNested(Fn.split("/", tfcWorkspaceSlug.stringValue), ["0"])
      ),
    });
    const tfeWorkspaceSettingsSelf = new WorkspaceSettings(this, "self_1", {
      assessments_enabled: true,
      tags: {
        prod: "true",
      },
      workspaceId: Token.asString(self.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeWorkspaceSettingsSelf.overrideLogicalId("self");
  }
}

```

## Argument Reference

The following arguments are supported:

* `workspaceId` - (Required) ID of the workspace.
* `agentPoolId` - (Optional) The ID of an agent pool to assign to the workspace. Requires `executionMode`
  to be set to `agent`. This value _must not_ be provided if `executionMode` is set to any other value.
* `executionMode` - (Optional) Which [execution mode](https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings#execution-mode)
  to use. Using HCP Terraform, valid values are `remote`, `local` or `agent`. When set to `local`, the workspace will be used for state storage only. **Important:** If you omit this attribute, the resource configures the workspace to use your organization's default execution mode (which in turn defaults to `remote`), removing any explicit value that might have previously been set for the workspace.
* `globalRemoteState` - (Optional) Whether the workspace allows all workspaces in the organization to access its state data during runs. If false, then only specifically approved workspaces can access its state (`remoteStateConsumerIds`). By default, HashiCorp recommends you do not allow other workspaces to access their state. We recommend that you follow the principle of least privilege and only enable state access between workspaces that specifically need information from each other.
* `remoteStateConsumerIds` - (Optional) The set of workspace IDs set as explicit remote state consumers for the given workspace. To set this attribute, global_remote_state must be false.
* `autoApply` - (Optional) Whether to automatically apply changes when a Terraform plan is successful. Defaults to `false`.
* `assessmentsEnabled` - (Optional) Whether to regularly run health assessments such as drift detection on the workspace. Defaults to `false`.
* `description` - (Optional) A description for the workspace.
* `tags` - (Optional) A map of key value tags for this workspace.


## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The workspace ID.
* `overwrites` - Can be used to check whether a setting is currently inheriting its value from another resource.
  - `executionMode` - Set to `true` if the execution mode of the workspace is being determined by the setting on the workspace itself. It will be `false` if the execution mode is inherited from another resource (e.g. the organization's default execution mode)
  - `agent_pool` - Set to `true` if the agent pool of the workspace is being determined by the setting on the workspace itself. It will be `false` if the agent pool is inherited from another resource (e.g. the organization's default agent pool)
* `effectiveTags` - A map of key value tags for this workspace, including any tags inherited from the parent project.

## Import

Workspaces can be imported; use `<WORKSPACE ID>` or `<ORGANIZATION NAME>/<WORKSPACE NAME>` as the
import ID. For example:

```shell
terraform import tfe_workspace_settings.test ws-CH5in3chf8RJjrVd
```

```shell
terraform import tfe_workspace_settings.test my-org-name/my-wkspace-name
```

<!-- cache-key: cdktf-0.20.8 input-ae37db8425cb90bf9d23460da7f257de504c63f7e3ecf246d845b2d4ccfe3df1 -->