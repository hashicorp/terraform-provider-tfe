---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_notification_configuration"
description: |-
  Manages notifications configurations.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_notification_configuration

HCP Terraform can be configured to send notifications for run state transitions.
Notification configurations allow you to specify a URL, destination type, and what events will trigger the notification.
Each workspace can have up to 20 notification configurations, and they apply to all runs for that workspace.


## Example Usage

Basic usage:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NotificationConfiguration } from "./.gen/providers/tfe/notification-configuration";
import { Organization } from "./.gen/providers/tfe/organization";
import { Workspace } from "./.gen/providers/tfe/workspace";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new Organization(this, "test", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const tfeWorkspaceTest = new Workspace(this, "test_1", {
      name: "my-workspace-name",
      organization: test.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeWorkspaceTest.overrideLogicalId("test");
    const tfeNotificationConfigurationTest = new NotificationConfiguration(
      this,
      "test_2",
      {
        destinationType: "generic",
        enabled: true,
        name: "my-test-notification-configuration",
        triggers: ["run:created", "run:planning", "run:errored"],
        url: "https://example.com",
        workspaceId: Token.asString(tfeWorkspaceTest.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeNotificationConfigurationTest.overrideLogicalId("test");
  }
}

```

With `destinationType` of `email`:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NotificationConfiguration } from "./.gen/providers/tfe/notification-configuration";
import { Organization } from "./.gen/providers/tfe/organization";
import { OrganizationMembership } from "./.gen/providers/tfe/organization-membership";
import { Workspace } from "./.gen/providers/tfe/workspace";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new Organization(this, "test", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const tfeOrganizationMembershipTest = new OrganizationMembership(
      this,
      "test_1",
      {
        email: "test.member@company.com",
        organization: "my-org-name",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeOrganizationMembershipTest.overrideLogicalId("test");
    const tfeWorkspaceTest = new Workspace(this, "test_2", {
      name: "my-workspace-name",
      organization: test.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeWorkspaceTest.overrideLogicalId("test");
    const tfeNotificationConfigurationTest = new NotificationConfiguration(
      this,
      "test_3",
      {
        destinationType: "email",
        emailUserIds: [Token.asString(tfeOrganizationMembershipTest.userId)],
        enabled: true,
        name: "my-test-email-notification-configuration",
        triggers: ["run:created", "run:planning", "run:errored"],
        workspaceId: Token.asString(tfeWorkspaceTest.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeNotificationConfigurationTest.overrideLogicalId("test");
  }
}

```

(**TFE only**) With `destinationType` of `email`, using `emailAddresses` list and `email_users`:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NotificationConfiguration } from "./.gen/providers/tfe/notification-configuration";
import { Organization } from "./.gen/providers/tfe/organization";
import { OrganizationMembership } from "./.gen/providers/tfe/organization-membership";
import { Workspace } from "./.gen/providers/tfe/workspace";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new Organization(this, "test", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const tfeOrganizationMembershipTest = new OrganizationMembership(
      this,
      "test_1",
      {
        email: "test.member@company.com",
        organization: "my-org-name",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeOrganizationMembershipTest.overrideLogicalId("test");
    const tfeWorkspaceTest = new Workspace(this, "test_2", {
      name: "my-workspace-name",
      organization: test.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeWorkspaceTest.overrideLogicalId("test");
    const tfeNotificationConfigurationTest = new NotificationConfiguration(
      this,
      "test_3",
      {
        destinationType: "email",
        emailAddresses: [
          "user1@company.com",
          "user2@company.com",
          "user3@company.com",
        ],
        emailUserIds: [Token.asString(tfeOrganizationMembershipTest.userId)],
        enabled: true,
        name: "my-test-email-notification-configuration",
        triggers: ["run:created", "run:planning", "run:errored"],
        workspaceId: Token.asString(tfeWorkspaceTest.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeNotificationConfigurationTest.overrideLogicalId("test");
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Name of the notification configuration.
* `destinationType` - (Required) The type of notification configuration payload to send.
  Valid values are:
  * `generic`
  * `email` available in HCP Terraform or Terraform Enterprise v202005-1 or later
  * `slack`
  * `microsoft-teams` available in HCP Terraform or Terraform Enterprise v202206-1 or later
* `emailAddresses` - (Optional) **TFE only** A list of email addresses. This value
  _must not_ be provided if `destinationType` is `generic`, `microsoft-teams`, or `slack`.
* `emailUserIds` - (Optional) A list of user IDs. This value _must not_ be provided
  if `destinationType` is `generic`, `microsoft-teams`, or `slack`.
* `enabled` - (Optional) Whether the notification configuration should be enabled or not.
  Disabled configurations will not send any notifications. Defaults to `false`.
* `token` - (Optional) A write-only secure token for the notification configuration, which can
  be used by the receiving server to verify request authenticity when configured for notification
  configurations with a destination type of `generic`. Defaults to `null`.
  This value _must not_ be provided if `destinationType` is `email`, `microsoft-teams`, or `slack`.
* `triggers` - (Optional) The array of triggers for which this notification configuration will
  send notifications. Valid values are `run:created`, `run:planning`, `run:needs_attention`, `run:applying`
  `run:completed`, `run:errored`, `assessment:check_failure`, `assessment:drifted`, `assessment:failed`, `workspace:auto_destroy_reminder`, or `workspace:auto_destroy_run_results`.
  If omitted, no notification triggers are configured.
* `url` - (Required if `destinationType` is `generic`, `microsoft-teams`, or `slack`) The HTTP or HTTPS URL of the notification
  configuration where notification requests will be made. This value _must not_ be provided if `destinationType`
  is `email`.
* `workspaceId` - (Required) The id of the workspace that owns the notification configuration.

## Attributes Reference

* `id` - The ID of the notification configuration.

## Import

Notification configurations can be imported; use `<NOTIFICATION CONFIGURATION ID>` as the import ID. For example:

```shell
terraform import tfe_notification_configuration.test nc-qV9JnKRkmtMa4zcA
```

<!-- cache-key: cdktf-0.20.8 input-710b7782960f76dfa6c0cc90313ce4411ea1070e9620f03dafea7305849d1d27 -->