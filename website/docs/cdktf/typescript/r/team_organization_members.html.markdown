---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_team_organization_members"
description: |-
  Add or remove users from a team based on their organization memberships.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_team_organization_members

Add or remove one or more team members using a
[tfe_organization_membership](organization_membership.html).

~> **NOTE** on managing team memberships: Terraform currently provides four
resources for managing team memberships. This - along with [tfe_team_organization_member](team_organization_member.html) - is the preferred method as it
allows you to add members to a team by email addresses. The [tfe_team_organization_member](team_organization_member.html) is used to manage a single team membership whereas [tfe_team_organization_members](team_organization_members.html) is used to manage all team memberships at once. All four resources cannot be used for the same team simultaneously.

~> **NOTE:** This resource requires using the provider with HCP Terraform or
an instance of Terraform Enterprise at least as recent as v202004-1.

## Example Usage

Basic usage:

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as tfe from "./.gen/providers/tfe";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const tfeOrganizationMembershipSample =
      new tfe.organizationMembership.OrganizationMembership(this, "sample", {
        email: "sample@hashicorp.com",
        organization: "my-org-name",
      });
    const tfeOrganizationMembershipTest =
      new tfe.organizationMembership.OrganizationMembership(this, "test", {
        email: "example@hashicorp.com",
        organization: "my-org-name",
      });
    const tfeTeamTest = new tfe.team.Team(this, "test_2", {
      name: "my-team-name",
      organization: "my-org-name",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeTeamTest.overrideLogicalId("test");
    const tfeTeamOrganizationMembersTest =
      new tfe.teamOrganizationMembers.TeamOrganizationMembers(this, "test_3", {
        organizationMembershipIds: [
          cdktf.Token.asString(tfeOrganizationMembershipTest.id),
          cdktf.Token.asString(tfeOrganizationMembershipSample.id),
        ],
        teamId: cdktf.Token.asString(tfeTeamTest.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeTeamOrganizationMembersTest.overrideLogicalId("test");
  }
}

```

With a set of organization members:

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as tfe from "./.gen/providers/tfe";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const allUsers = cdktf.Fn.toset([
      "user1@hashicorp.com",
      "user2@hashicorp.com",
    ]);
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const tfeOrganizationMembershipAllMembershipForEachIterator =
      cdktf.TerraformIterator.fromList(cdktf.Token.asAny(allUsers));
    new tfe.organizationMembership.OrganizationMembership(
      this,
      "all_membership",
      {
        email: cdktf.Token.asString(
          tfeOrganizationMembershipAllMembershipForEachIterator.key
        ),
        organization: "my-org-name",
        forEach: tfeOrganizationMembershipAllMembershipForEachIterator,
      }
    );
    const tfeTeamTest = new tfe.team.Team(this, "test", {
      name: "my-team-name",
      organization: "my-org-name",
    });
    const tfeTeamOrganizationMembersTest =
      new tfe.teamOrganizationMembers.TeamOrganizationMembers(this, "test_2", {
        organizationMembershipIds: cdktf.Token.asList(
          "${[ for member in ${" +
            allUsers +
            "} : tfe_organization_membership.all_membership[member].id]}"
        ),
        teamId: cdktf.Token.asString(tfeTeamTest.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeTeamOrganizationMembersTest.overrideLogicalId("test");
  }
}

```

## Argument Reference

The following arguments are supported:

* `teamId` - (Required) ID of the team.
* `organizationMembershipIds` - (Required) IDs of organization memberships to be added.

## Import

A resource can be imported by using the team ID `<TEAM ID>`
as the import ID. For example:

```shell
terraform import tfe_team_organization_members.test team-47qC3LmA47piVan7
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-641324e3bfad1336563feb20d81abd6386c5badfdeab86ffc533fda09946b35e -->