---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_data_retention_policy"
description: |-
  Manages data retention policies for organizations and workspaces
---


<!-- Please do not edit this file, it is generated. -->
# tfe_data_retention_policy

Creates a data retention policy attached to either an organization or workspace. This resource is for Terraform Enterprise only.

## Example Usage

Creating a data retention policy for a workspace:

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as tfe from "./.gen/providers/tfe";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const tfeOrganizationTestOrganization = new tfe.organization.Organization(
      this,
      "test-organization",
      {
        email: "admin@company.com",
        name: "my-org-name",
      }
    );
    const tfeWorkspaceTestWorkspace = new tfe.workspace.Workspace(
      this,
      "test-workspace",
      {
        name: "my-workspace-name",
        organization: cdktf.Token.asString(
          tfeOrganizationTestOrganization.name
        ),
      }
    );
    new tfe.dataRetentionPolicy.DataRetentionPolicy(this, "foobar", {
      deleteOlderThan: [
        {
          days: 42,
        },
      ],
      workspaceId: cdktf.Token.asString(tfeWorkspaceTestWorkspace.id),
    });
  }
}

```

Creating a data retention policy for an organization:

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as tfe from "./.gen/providers/tfe";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const tfeOrganizationTestOrganization = new tfe.organization.Organization(
      this,
      "test-organization",
      {
        email: "admin@company.com",
        name: "my-org-name",
      }
    );
    new tfe.dataRetentionPolicy.DataRetentionPolicy(this, "foobar", {
      deleteOlderThan: [
        {
          days: 1138,
        },
      ],
      organization: cdktf.Token.asString(tfeOrganizationTestOrganization.name),
    });
  }
}

```

Creating a data retention policy for an organization and exclude a single workspace from it:

```hcl
resource "tfe_organization" "test-organization" {
  name  = "my-org-name"
  email = "admin@company.com"
}

// create data retention policy the organization
resource "tfe_data_retention_policy" "foobar" {
  organization = tfe_organization.test-organization.name

  delete_older_than {
    days = 1138
  }
}

resource "tfe_workspace" "test-workspace" {
  name         = "my-workspace-name"
  organization = tfe_organization.test-organization.name
}

// create a policy that prevents automatic deletion of data in the test-workspace
resource "tfe_data_retention_policy" "foobar" {
  workspace_id = tfe_workspace.test-workspace.id

  dont_delete {}
}
```

## Argument Reference

The following arguments are supported:

* `organization` - (Optional) The name of the organization you want the policy to apply to. Must not be set if `workspaceId` is set.
* `workspaceId` - (Optional) The ID of the workspace you want the policy to apply to. Must not be set if `organization` is set.
* `deleteOlderThan` - (Optional) If this block is set, the created policy will apply to any data older than the configured number of days. Must not be set if `dontDelete` is set.
* `dontDelete` - (Optional) If this block is set, the created policy will prevent other policies from deleting data from this workspace or organization. Must not be set if `deleteOlderThan` is set.


## Import

A resource can be imported; use `<ORGANIZATION>/<WORKSPACE NAME>` or `<ORGANIZATION>` as the import ID. For example:

```shell
terraform import tfe_data_retention_policy.foobar my-org-name/my-workspace-name
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-f96ec458c2bca8796e296f06011ad4fc674072a5029841651f6906f053e79d76 -->