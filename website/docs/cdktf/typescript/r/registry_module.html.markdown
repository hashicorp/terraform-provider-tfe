---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_registry_module"
description: |-
  Manages registry modules
---


<!-- Please do not edit this file, it is generated. -->
# tfe_registry_module

HCP Terraform's private module registry helps you share Terraform modules across your organization.

## Example Usage

Basic usage with VCS:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OauthClient } from "./.gen/providers/tfe/oauth-client";
import { Organization } from "./.gen/providers/tfe/organization";
import { RegistryModule } from "./.gen/providers/tfe/registry-module";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const testOrganization = new Organization(this, "test-organization", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const testOauthClient = new OauthClient(this, "test-oauth-client", {
      apiUrl: "https://api.github.com",
      httpUrl: "https://github.com",
      oauthToken: "my-vcs-provider-token",
      organization: testOrganization.name,
      serviceProvider: "github",
    });
    new RegistryModule(this, "test-registry-module", {
      vcsRepo: {
        displayIdentifier: "my-org-name/terraform-provider-name",
        identifier: "my-org-name/terraform-provider-name",
        oauthTokenId: testOauthClient.oauthTokenId,
      },
    });
  }
}

```

Create private registry module with tests enabled:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OauthClient } from "./.gen/providers/tfe/oauth-client";
import { Organization } from "./.gen/providers/tfe/organization";
import { RegistryModule } from "./.gen/providers/tfe/registry-module";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const testOrganization = new Organization(this, "test-organization", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const testOauthClient = new OauthClient(this, "test-oauth-client", {
      apiUrl: "https://api.github.com",
      httpUrl: "https://github.com",
      oauthToken: "my-vcs-provider-token",
      organization: testOrganization.name,
      serviceProvider: "github",
    });
    new RegistryModule(this, "test-registry-module", {
      testConfig: [
        {
          testsEnabled: true,
        },
      ],
      vcsRepo: {
        branch: "main",
        displayIdentifier: "my-org-name/terraform-provider-name",
        identifier: "my-org-name/terraform-provider-name",
        oauthTokenId: testOauthClient.oauthTokenId,
      },
    });
  }
}

```

Create private registry module with GitHub App:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataTfeGithubAppInstallation } from "./.gen/providers/tfe/data-tfe-github-app-installation";
import { Organization } from "./.gen/providers/tfe/organization";
import { RegistryModule } from "./.gen/providers/tfe/registry-module";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const testOrganization = new Organization(this, "test-organization", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const ghaInstallation = new DataTfeGithubAppInstallation(
      this,
      "gha_installation",
      {
        name: "YOUR_GH_NAME",
      }
    );
    new RegistryModule(this, "petstore", {
      organization: testOrganization.name,
      vcsRepo: {
        displayIdentifier: "GH_NAME/REPO_NAME",
        githubAppInstallationId: Token.asString(ghaInstallation.id),
        identifier: "GH_NAME/REPO_NAME",
      },
    });
  }
}

```

Create private registry module without VCS:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Organization } from "./.gen/providers/tfe/organization";
import { RegistryModule } from "./.gen/providers/tfe/registry-module";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const testOrganization = new Organization(this, "test-organization", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    new RegistryModule(this, "test-private-registry-module", {
      moduleProvider: "my_provider",
      name: "another_test_module",
      organization: testOrganization.name,
      registryName: "private",
    });
  }
}

```

Create public registry module:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Organization } from "./.gen/providers/tfe/organization";
import { RegistryModule } from "./.gen/providers/tfe/registry-module";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const testOrganization = new Organization(this, "test-organization", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    new RegistryModule(this, "test-public-registry-module", {
      moduleProvider: "aws",
      name: "vpc",
      namespace: "terraform-aws-modules",
      organization: testOrganization.name,
      registryName: "public",
    });
  }
}

```

Create no-code provisioning registry module:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NoCodeModule } from "./.gen/providers/tfe/no-code-module";
import { Organization } from "./.gen/providers/tfe/organization";
import { RegistryModule } from "./.gen/providers/tfe/registry-module";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const testOrganization = new Organization(this, "test-organization", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const testNoCodeProvisioningRegistryModule = new RegistryModule(
      this,
      "test-no-code-provisioning-registry-module",
      {
        moduleProvider: "aws",
        name: "vpc",
        namespace: "terraform-aws-modules",
        organization: testOrganization.name,
        registryName: "public",
      }
    );
    new NoCodeModule(this, "foobar", {
      organization: testOrganization.id,
      registryModule: testNoCodeProvisioningRegistryModule.id,
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `vcsRepo` - (Optional) Settings for the registry module's VCS repository. Forces a
  new resource if changed. One of `vcsRepo` or `moduleProvider` is required.
* `moduleProvider` - (Optional) Specifies the Terraform provider that this module is used for. For example, "aws"
* `name` - (Optional) The name of registry module. It must be set if `moduleProvider` is used.
* `organization` - (Optional) The name of the organization associated with the registry module. It must be set if `moduleProvider` is used, or if `vcsRepo` is used via a GitHub App.
* `namespace` - (Optional) The namespace of a public registry module. It can be used if `moduleProvider` is set and `registryName` is public.
* `registryName` - (Optional) Whether the registry module is private or public. It can be used if `moduleProvider` is set.
* `initialVersion` - (Optional) This specifies the initial version for a branch based module. It can be used if `vcs_repo.branch` is set. If it is omitted, the initial modules version will default to `0.0.0`.

The `testConfig` block supports
* `testsEnabled` - (Optional) Specifies whether tests run for the registry module. Tests are only supported for branch-based publishing.

The `vcsRepo` block supports:

* `displayIdentifier` - (Required) The display identifier for your VCS repository.
  For most VCS providers outside of BitBucket Cloud and Azure DevOps, this will match the `identifier`
  string.
* `identifier` - (Required) A reference to your VCS repository in the format
  `<organization>/<repository>` where `<organization>` and `<repository>` refer to the organization (or project key, for Bitbucket Data Center)
  and repository in your VCS provider. The format for Azure DevOps is `<ado organization>/<ado project>/_git/<ado repository>`.
* `oauthTokenId` - (Optional) Token ID of the VCS Connection (OAuth Connection Token) to use. This conflicts with `githubAppInstallationId` and can only be used if `githubAppInstallationId` is not used.
* `githubAppInstallationId` - (Optional) The installation id of the Github App. This conflicts with `oauthTokenId` and can only be used if `oauthTokenId` is not used.
* `branch` - (Optional) The git branch used for publishing when using branch-based publishing for the registry module. When a `branch` is set, `tags` will be returned as `false`.
* `tags` - (Optional) Specifies whether tag based publishing is enabled for the registry module. When `tags` is set to `true`, the `branch` must be set to an empty value.

## Attributes Reference

* `id` - The ID of the registry module.
* `moduleProvider` - The Terraform provider that this module is used for.
* `name` - The name of registry module.
* `organization` - The name of the organization associated with the registry module.
* `namespace` - The namespace of the module. For private modules this is the name of the organization that owns the module.
* `publishingMechanism` - The publishing mechanism used when releasing new versions of the module.
* `registryName` - The registry name of the registry module depicting whether the registry module is private or public.
* `noCode` - **Deprecated** The property that will enable or disable a module as no-code provisioning ready.
Use the tfe_no_code_module resource instead.

## Import

Registry modules can be imported; use `<ORGANIZATION>/<REGISTRY_NAME>/<NAMESPACE>/<REGISTRY MODULE NAME>/<REGISTRY MODULE PROVIDER>/<REGISTRY MODULE ID>` as the import ID. For example:

```shell
terraform import tfe_registry_module.test my-org-name/public/namespace/name/provider/mod-qV9JnKRkmtMa4zcA
```

**Deprecated** use `<ORGANIZATION NAME>/<REGISTRY MODULE NAME>/<REGISTRY MODULE PROVIDER>/<REGISTRY MODULE ID>` as the import ID. For example:

```shell
terraform import tfe_registry_module.test my-org-name/name/provider/mod-qV9JnKRkmtMa4zcA
```

<!-- cache-key: cdktf-0.20.8 input-83bb5f1b9e18171b736eafaa3cee5546bbb042f6dcf960e215905b4b8a26ffac -->