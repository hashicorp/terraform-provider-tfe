---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_variables"
description: |-
  Get information on a workspace variables.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: tfe_variables

This data source is used to retrieve all variables defined in a specified workspace

## Example Usage

For workspace variables:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataTfeVariables } from "./.gen/providers/tfe/data-tfe-variables";
import { DataTfeWorkspace } from "./.gen/providers/tfe/data-tfe-workspace";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new DataTfeWorkspace(this, "test", {
      name: "my-workspace-name",
      organization: "my-org-name",
    });
    const dataTfeVariablesTest = new DataTfeVariables(this, "test_1", {
      workspaceId: Token.asString(test.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataTfeVariablesTest.overrideLogicalId("test");
  }
}

```

For variable set variables:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataTfeVariableSet } from "./.gen/providers/tfe/data-tfe-variable-set";
import { DataTfeVariables } from "./.gen/providers/tfe/data-tfe-variables";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new DataTfeVariableSet(this, "test", {
      name: "my-variable-set-name",
      organization: "my-org-name",
    });
    const dataTfeVariablesTest = new DataTfeVariables(this, "test_1", {
      variableSetId: Token.asString(test.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataTfeVariablesTest.overrideLogicalId("test");
  }
}

```

## Argument Reference

One of following arguments are required:

* `workspaceId` - ID of the workspace.
* `variableSetId` - ID of the workspace.

## Attributes Reference

* `variables` - List containing all terraform and environment variables configured on the workspace
* `terraform` - List containing terraform variables configured on the workspace
* `env` - List containing environment variables configured on the workspace

The `variables, terraform and env` blocks contains:

* `id` - The variable Id
* `name` - The variable Key name
* `value` -  The variable value. If the variable is sensitive this value will be empty.
* `category` -  The category of the variable (terraform or environment)
* `sensitive` - If the variable is marked as sensitive or not
* `hcl` - If the variable is marked as HCL or not

<!-- cache-key: cdktf-0.20.8 input-635190fbcaed3640f0f12f181a3eae6abefebcbcad7f5806bfb392bb4097eaef -->