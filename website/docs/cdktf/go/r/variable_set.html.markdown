---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_variable_set"
description: |-
  Manages variable sets.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_variable_set

Creates, updates and destroys variable sets.

## Example Usage

Basic usage:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/project"
import "github.com/aws-samples/dummy/gen/providers/tfe/variableSet"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspace"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspaceVariableSet"
import "github.com/aws-samples/dummy/gen/providers/tfe/projectVariableSet"
import "github.com/aws-samples/dummy/gen/providers/tfe/variable"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationTest := organization.NewOrganization(this, jsii.String("test"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeProjectTest := project.NewProject(this, jsii.String("test_1"), &projectConfig{
		name: jsii.String("projectname"),
		organization: cdktf.Token_AsString(tfeOrganizationTest.name),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeProjectTest.OverrideLogicalId(jsii.String("test"))
	tfeVariableSetTest := variableSet.NewVariableSet(this, jsii.String("test_2"), &variableSetConfig{
		description: jsii.String("Some description."),
		name: jsii.String("Test Varset"),
		organization: cdktf.Token_*AsString(tfeOrganizationTest.name),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeVariableSetTest.OverrideLogicalId(jsii.String("test"))
	tfeWorkspaceTest := workspace.NewWorkspace(this, jsii.String("test_3"), &workspaceConfig{
		name: jsii.String("my-workspace-name"),
		organization: cdktf.Token_*AsString(tfeOrganizationTest.name),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeWorkspaceTest.OverrideLogicalId(jsii.String("test"))
	tfeWorkspaceVariableSetTest :=
	workspaceVariableSet.NewWorkspaceVariableSet(this, jsii.String("test_4"), &workspaceVariableSetConfig{
		variableSetId: cdktf.Token_*AsString(tfeVariableSetTest.id),
		workspaceId: cdktf.Token_*AsString(tfeWorkspaceTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeWorkspaceVariableSetTest.OverrideLogicalId(jsii.String("test"))
	tfeProjectVariableSetTest :=
	projectVariableSet.NewProjectVariableSet(this, jsii.String("test_5"), &projectVariableSetConfig{
		projectId: cdktf.Token_*AsString(tfeProjectTest.id),
		variableSetId: cdktf.Token_*AsString(tfeVariableSetTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeProjectVariableSetTest.OverrideLogicalId(jsii.String("test"))
	variable.NewVariable(this, jsii.String("test-a"), &variableConfig{
		category: jsii.String("terraform"),
		description: jsii.String("a useful description"),
		key: jsii.String("seperate_variable"),
		value: jsii.String("my_value_name"),
		variableSetId: cdktf.Token_*AsString(tfeVariableSetTest.id),
	})
	variable.NewVariable(this, jsii.String("test-b"), &variableConfig{
		category: jsii.String("env"),
		description: jsii.String("an environment variable"),
		key: jsii.String("another_variable"),
		value: jsii.String("my_value_name"),
		variableSetId: cdktf.Token_*AsString(tfeVariableSetTest.id),
	})
	return this
}
```

Creating a global variable set:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/variableSet"
import "github.com/aws-samples/dummy/gen/providers/tfe/variable"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationTest := organization.NewOrganization(this, jsii.String("test"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeVariableSetTest := variableSet.NewVariableSet(this, jsii.String("test_1"), &variableSetConfig{
		description: jsii.String("Variable set applied to all workspaces."),
		global: jsii.Boolean(true),
		name: jsii.String("Global Varset"),
		organization: cdktf.Token_AsString(tfeOrganizationTest.name),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeVariableSetTest.OverrideLogicalId(jsii.String("test"))
	variable.NewVariable(this, jsii.String("test-a"), &variableConfig{
		category: jsii.String("terraform"),
		description: jsii.String("a useful description"),
		key: jsii.String("seperate_variable"),
		value: jsii.String("my_value_name"),
		variableSetId: cdktf.Token_*AsString(tfeVariableSetTest.id),
	})
	variable.NewVariable(this, jsii.String("test-b"), &variableConfig{
		category: jsii.String("env"),
		description: jsii.String("an environment variable"),
		key: jsii.String("another_variable"),
		value: jsii.String("my_value_name"),
		variableSetId: cdktf.Token_*AsString(tfeVariableSetTest.id),
	})
	return this
}
```

Create a priority variable set:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/variableSet"
import "github.com/aws-samples/dummy/gen/providers/tfe/variable"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationTest := organization.NewOrganization(this, jsii.String("test"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeVariableSetTest := variableSet.NewVariableSet(this, jsii.String("test_1"), &variableSetConfig{
		description: jsii.String("Variable set applied to all workspaces."),
		name: jsii.String("Global Varset"),
		organization: cdktf.Token_AsString(tfeOrganizationTest.name),
		priority: jsii.Boolean(true),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeVariableSetTest.OverrideLogicalId(jsii.String("test"))
	variable.NewVariable(this, jsii.String("test-a"), &variableConfig{
		category: jsii.String("terraform"),
		description: jsii.String("a useful description"),
		key: jsii.String("seperate_variable"),
		value: jsii.String("my_value_name"),
		variableSetId: cdktf.Token_*AsString(tfeVariableSetTest.id),
	})
	variable.NewVariable(this, jsii.String("test-b"), &variableConfig{
		category: jsii.String("env"),
		description: jsii.String("an environment variable"),
		key: jsii.String("another_variable"),
		value: jsii.String("my_value_name"),
		variableSetId: cdktf.Token_*AsString(tfeVariableSetTest.id),
	})
	return this
}
```

Creating a project-owned variable set that is applied to all workspaces in the project:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/project"
import "github.com/aws-samples/dummy/gen/providers/tfe/variableSet"
import "github.com/aws-samples/dummy/gen/providers/tfe/projectVariableSet"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationTest := organization.NewOrganization(this, jsii.String("test"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeProjectTest := project.NewProject(this, jsii.String("test_1"), &projectConfig{
		name: jsii.String("projectname"),
		organization: cdktf.Token_AsString(tfeOrganizationTest.name),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeProjectTest.OverrideLogicalId(jsii.String("test"))
	tfeVariableSetTest := variableSet.NewVariableSet(this, jsii.String("test_2"), &variableSetConfig{
		description: jsii.String("Varset that is owned and managed by a project."),
		name: jsii.String("Project-owned Varset"),
		organization: cdktf.Token_*AsString(tfeOrganizationTest.name),
		parentProjectId: cdktf.Token_*AsString(tfeProjectTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeVariableSetTest.OverrideLogicalId(jsii.String("test"))
	tfeProjectVariableSetTest :=
	projectVariableSet.NewProjectVariableSet(this, jsii.String("test_3"), &projectVariableSetConfig{
		projectId: cdktf.Token_*AsString(tfeProjectTest.id),
		variableSetId: cdktf.Token_*AsString(tfeVariableSetTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeProjectVariableSetTest.OverrideLogicalId(jsii.String("test"))
	return this
}
```

Creating a project-owned variable set that is applied to specific workspaces:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/project"
import "github.com/aws-samples/dummy/gen/providers/tfe/variableSet"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspace"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspaceVariableSet"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationTest := organization.NewOrganization(this, jsii.String("test"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeProjectTest := project.NewProject(this, jsii.String("test_1"), &projectConfig{
		name: jsii.String("projectname"),
		organization: cdktf.Token_AsString(tfeOrganizationTest.name),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeProjectTest.OverrideLogicalId(jsii.String("test"))
	tfeVariableSetTest := variableSet.NewVariableSet(this, jsii.String("test_2"), &variableSetConfig{
		description: jsii.String("Varset that is owned and managed by a project."),
		name: jsii.String("Project-owned Varset"),
		organization: cdktf.Token_*AsString(tfeOrganizationTest.name),
		parentProjectId: cdktf.Token_*AsString(tfeProjectTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeVariableSetTest.OverrideLogicalId(jsii.String("test"))
	tfeWorkspaceTest := workspace.NewWorkspace(this, jsii.String("test_3"), &workspaceConfig{
		name: jsii.String("my-workspace-name"),
		organization: cdktf.Token_*AsString(tfeOrganizationTest.name),
		projectId: cdktf.Token_*AsString(tfeProjectTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeWorkspaceTest.OverrideLogicalId(jsii.String("test"))
	tfeWorkspaceVariableSetTest :=
	workspaceVariableSet.NewWorkspaceVariableSet(this, jsii.String("test_4"), &workspaceVariableSetConfig{
		variableSetId: cdktf.Token_*AsString(tfeVariableSetTest.id),
		workspaceId: cdktf.Token_*AsString(tfeWorkspaceTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeWorkspaceVariableSetTest.OverrideLogicalId(jsii.String("test"))
	return this
}
```

## Argument Reference

The following arguments are supported:

* `Name` - (Required) Name of the variable set.
* `Description` - (Optional) Description of the variable set.
* `Global` - (Optional) Whether the variable set applies to all workspaces in the organization. Defaults to `False`.
* `Priority` - (Optional) Whether the variables in this set can be over-written by more specific scopes including values set on the command line. Defaults to `False`.
* `Organization` - (Optional) Name of the organization. If omitted, organization must be defined in the provider config.
* `WorkspaceIds` - **Deprecated** (Optional) IDs of the workspaces that use the variable set.
  Must not be set if `Global` is set. This argument is mutually exclusive with using the resource
  [tfe_workspace_variable_set](workspace_variable_set.html) which is the preferred method of associating a workspace
  with a variable set.
* `ParentProjectId` - (Optional) ID of the project that should own the variable set. If set, than the value of `Global` must be `False`.
  To assign whether a variable set should be applied to a project, use the [`TfeProjectVariableSet`](project_variable_set.html) resource.

## Attributes Reference

* `Id` - The ID of the variable set.

## Import

Variable sets can be imported; use `<VARIABLE SET ID>` as the import ID. For example:

```shell
terraform import tfe_variable_set.test varset-5rTwnSaRPogw6apb
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-e43c37b8fda384ac825900c2a05dad46b7405306e02b1151313679fb612e7a61 -->