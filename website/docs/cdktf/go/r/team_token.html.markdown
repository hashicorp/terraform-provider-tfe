---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_team_token"
description: |-
  Generates a new team token and overrides existing token if one exists.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_team_token

Generates a new team token. If a description is not set, then it follows the legacy behavior to override
the single team token without a description if it exists.

## Example Usage

Basic usage:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/team"
import "github.com/aws-samples/dummy/gen/providers/tfe/teamToken"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeTeamTest := team.NewTeam(this, jsii.String("test"), &teamConfig{
		name: jsii.String("my-team-name"),
		organization: jsii.String("my-org-name"),
	})
	teamToken.NewTeamToken(this, jsii.String("ci"), &teamTokenConfig{
		description: jsii.String("my second team token"),
		teamId: cdktf.Token_AsString(tfeTeamTest.id),
	})
	tfeTeamTokenTest := teamToken.NewTeamToken(this, jsii.String("test_2"), &teamTokenConfig{
		description: jsii.String("my team token"),
		teamId: cdktf.Token_*AsString(tfeTeamTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeTeamTokenTest.OverrideLogicalId(jsii.String("test"))
	return this
}
```

## Argument Reference

The following arguments are supported:

* `TeamId` - (Required) ID of the team.
* `Description` - (Optional) The token's description, which must be unique per team. Required if creating multiple
  tokens for a single team.
* `ExpiredAt` - (Optional) The token's expiration date. The expiration date must be a date/time string in RFC3339 
format (e.g., "2024-12-31T23:59:59Z"). If no expiration date is supplied, the expiration date will default to null and 
never expire.
* `ForceRegenerate` - (Optional) Only applies to legacy tokens without descriptions. If set to `True`, a new
  token will be generated even if a token already exists. This will invalidate the existing token! This cannot
  be set with `Description`.

## Example Usage

When a token has an expiry:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/team"
import "github.com/aws-samples/dummy/gen/providers/tfe/teamToken"
import "github.com/aws-samples/dummy/gen/providers/time/rotating"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: time.
	    For a more precise conversion please use the --provider flag in convert.*/
	tfeTeamTest := team.NewTeam(this, jsii.String("test"), &teamConfig{
		name: jsii.String("my-team-name"),
		organization: jsii.String("my-org-name"),
	})
	timeRotatingExample := rotating.NewRotating(this, jsii.String("example"), map[string]*f64{
		"rotation_days": jsii.Number(30),
	})
	tfeTeamTokenTest := teamToken.NewTeamToken(this, jsii.String("test_2"), &teamTokenConfig{
		description: jsii.String("my team token"),
		expiredAt: cdktf.Token_AsString(timeRotatingExample.rotationRfc3339),
		teamId: cdktf.Token_*AsString(tfeTeamTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeTeamTokenTest.OverrideLogicalId(jsii.String("test"))
	return this
}
```

## Attributes Reference

* `Id` - The ID of the token.
* `Token` - The generated token.

## Import

Team tokens can be imported either by `<TOKEN ID>` or by `<TEAM ID>`. Using the team ID will follow the
legacy behavior where the imported token is the single token of the team that has no description.

For example:

```shell
terraform import tfe_team_token.test at-47qC3LmA47piVan7
terraform import tfe_team_token.test team-47qC3LmA47piVan7
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-292898c6eaed44c7a5d55942b397c8db6d933d9f88e258bb804dbd6e2a77157c -->