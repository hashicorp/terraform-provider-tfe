---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_project_variable_set"
description: |-
  Add a variable set to a project
---


<!-- Please do not edit this file, it is generated. -->
# tfe_project_variable_set

Adds and removes a project from a variable set's scope.

-> **Note:** This resource controls whether a project has access to a variable set, not whether
a project owns the variable set. Ownership is specified by setting the `ParentProjectId` on the
`TfeVariableSet` resource.

## Example Usage

Basic usage:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/project"
import "github.com/aws-samples/dummy/gen/providers/tfe/variableSet"
import "github.com/aws-samples/dummy/gen/providers/tfe/projectVariableSet"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationTest := organization.NewOrganization(this, jsii.String("test"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeProjectTest := project.NewProject(this, jsii.String("test_1"), &projectConfig{
		name: jsii.String("my-project-name"),
		organization: cdktf.Token_AsString(tfeOrganizationTest.name),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeProjectTest.OverrideLogicalId(jsii.String("test"))
	tfeVariableSetTest := variableSet.NewVariableSet(this, jsii.String("test_2"), &variableSetConfig{
		description: jsii.String("Some description."),
		name: jsii.String("Test Varset"),
		organization: cdktf.Token_*AsString(tfeOrganizationTest.name),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeVariableSetTest.OverrideLogicalId(jsii.String("test"))
	tfeProjectVariableSetTest :=
	projectVariableSet.NewProjectVariableSet(this, jsii.String("test_3"), &projectVariableSetConfig{
		projectId: cdktf.Token_*AsString(tfeProjectTest.id),
		variableSetId: cdktf.Token_*AsString(tfeVariableSetTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeProjectVariableSetTest.OverrideLogicalId(jsii.String("test"))
	return this
}
```

## Argument Reference

The following arguments are supported:

* `VariableSetId` - (Required) Name of the variable set to add.
* `ProjectId` - (Required) Project ID to add the variable set to.

## Attributes Reference

* `Id` - The ID of the variable set attachment. ID format: `<project-id>_<variable-set-id>`

## Import

Project Variable Sets can be imported; use `<ORGANIZATION>/<PROJECT ID>/<VARIABLE SET NAME>`. For example:

```shell
terraform import tfe_project_variable_set.test 'my-org-name/prj-F1NpdVBuCF3xc5Rp/Test Varset'
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-daf47945bcce294b7bb84fb1557fe718d31e19868ca6657bf229429e9d6bb394 -->