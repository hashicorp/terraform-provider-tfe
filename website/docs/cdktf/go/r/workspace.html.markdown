---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_workspace"
description: |-
  Manages workspaces.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_workspace

Provides a workspace resource.

~> **NOTE:** Setting the execution mode and agent pool affinity directly on the workspace is deprecated in favor of using both [tfe_workspace_settings](workspace_settings) and [tfe_organization_default_settings](organization_default_settings), since they allow more precise control and fully support [agent_pool_allowed_workspaces](agent_pool_allowed_workspaces). Use caution when unsetting `ExecutionMode`, as it now leaves any prior value unmanaged instead of reverting to the old default value of `"remote"`.

## Example Usage

Basic usage:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspace"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationTestOrganization := organization.NewOrganization(this, jsii.String("test-organization"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	workspace.NewWorkspace(this, jsii.String("test"), &workspaceConfig{
		name: jsii.String("my-workspace-name"),
		organization: cdktf.Token_AsString(tfeOrganizationTestOrganization.name),
		tags: map[string]*string{
			"environment": jsii.String("prod"),
			"team_owner": jsii.String("my-team"),
		},
	})
	return this
}
```

Usage with vcs_repo:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/oauthClient"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspace"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationTestOrganization := organization.NewOrganization(this, jsii.String("test-organization"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeOauthClientTest := oauthClient.NewOauthClient(this, jsii.String("test"), &oauthClientConfig{
		apiUrl: jsii.String("https://api.github.com"),
		httpUrl: jsii.String("https://github.com"),
		oauthToken: jsii.String("oauth_token_id"),
		organization: cdktf.Token_AsString(tfeOrganizationTestOrganization.name),
		serviceProvider: jsii.String("github"),
	})
	workspace.NewWorkspace(this, jsii.String("parent"), &workspaceConfig{
		name: jsii.String("parent-ws"),
		organization: cdktf.Token_*AsString(tfeOrganizationTestOrganization.name),
		queueAllRuns: jsii.Boolean(false),
		vcsRepo: &workspaceVcsRepo{
			branch: jsii.String("main"),
			identifier: jsii.String("my-org-name/vcs-repository"),
			oauthTokenId: cdktf.Token_*AsString(tfeOauthClientTest.oauthTokenId),
		},
	})
	return this
}
```

## Argument Reference

The following arguments are supported:

* `Name` - (Required) Name of the workspace.
* `AgentPoolId` - (Optional) **Deprecated** The ID of an agent pool to assign to the workspace. Use [tfe_workspace_settings](workspace_settings) instead.
* `AllowDestroyPlan` - (Optional) Whether destroy plans can be queued on the workspace.
* `AssessmentsEnabled` - (Optional) Whether to regularly run health assessments such as drift detection on the workspace. Defaults to `False`.
* `AutoApply` - (Optional) Whether to automatically apply changes when a Terraform plan is successful. Defaults to `False`.
* `AutoApplyRunTrigger` - (Optional) Whether to automatically apply changes for runs that were created by run triggers from another workspace. Defaults to `False`.
* `AutoDestroyActivityDuration` - (Optional) A duration string of the period of time after workspace activity to automatically schedule an auto-destroy run. Must be of the form `<number><unit>` where allowed unit values are "d" and "h". Conflicts with `AutoDestroyAt`.
* `AutoDestroyAt` - (Optional) A future date/time string at which point all resources in a workspace will be scheduled for deletion. Must be a string in RFC3339 format (e.g. "2100-01-01T00:00:00Z"). Conflicts with `AutoDestroyActivityDuration`.

~> **NOTE:** `AutoDestroyAt` is not intended for workspaces containing production resources or long-lived workspaces. Since this attribute is in-part managed by HCP Terraform, using `IgnoreChanges` for this attribute may be preferred.

* `Description` - (Optional) A description for the workspace.
* `ExecutionMode` - (Optional) **Deprecated** Which [execution mode](https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings#execution-mode) to use. Use [tfe_workspace_settings](workspace_settings) instead.
* `FileTriggersEnabled` - (Optional) Whether to filter runs based on the changed files
  in a VCS push. Defaults to `True`. If enabled, the working directory and
  trigger prefixes describe a set of paths which must contain changes for a
  VCS push to trigger a run. If disabled, any push will trigger a run.
* `ForceDelete` - (Optional) If this attribute is present on a workspace that is being deleted through the provider, it will use the existing force delete API. If this attribute is not present or false it will safe delete the workspace.
* `GlobalRemoteState` - (Optional) **Deprecated** Whether the workspace allows all workspaces in the organization to access its state data during runs. Use [tfe_workspace_settings](workspace_settings) instead.
* `Operations` - **Deprecated** Whether to use remote execution mode.
  Defaults to `True`. When set to `False`, the workspace will be used for
  state storage only. This value _must not_ be provided if `ExecutionMode` is
  provided.
* `Organization` - (Optional) Name of the organization. If omitted, organization must be defined in the provider config.
* `ProjectId` - (Optional) ID of the project where the workspace should be created.
* `QueueAllRuns` - (Optional) Whether the workspace should start
  automatically performing runs immediately after its creation. Defaults to
  `True`. When set to `False`, runs triggered by a webhook (such as a commit
  in VCS) will not be queued until at least one run has been manually queued.
  **Note:** This default differs from the HCP Terraform API default, which
  is `False`. The provider uses `True` as any workspace provisioned with
  `False` would need to then have a run manually queued out-of-band before
  accepting webhooks.
* `RemoteStateConsumerIds` - (Optional) **Deprecated** The set of workspace IDs set as explicit remote state consumers for the given workspace. Use [tfe_workspace_settings](workspace_settings) instead.
* `SourceName` - (Optional) A friendly name for the application or client
   creating this workspace. If set, this will be displayed on the workspace as
   "Created via <SOURCE NAME>". This value cannot be updated after
   initial creation. Use `terraform apply -replace` to update this value.   Requires `SourceUrl` to also be set.
* `SourceUrl` - (Optional) A URL for the application or client creating this
   workspace. This can be the URL of a related resource in another app, or a
   link to documentation or other info about the client.
   Requires `SourceName` to also be set. This value cannot be updated after
   initial creation. Use `terraform apply -replace` to update this value.
   **Note:** The API does not (currently) allow this to be updated after a
   workspace has been created, so modifying this value will result in the
   workspace being replaced. To disable this, use an [ignore changes](https://developer.hashicorp.com/terraform/language/meta-arguments/lifecycle#ignore_changes) lifecycle meta-argument
* `SpeculativeEnabled` - (Optional) Whether this workspace allows speculative
  plans. Defaults to `True`. Setting this to `False` prevents HCP Terraform
  or the Terraform Enterprise instance from running plans on pull requests,
  which can improve security if the VCS repository is public or includes
  untrusted contributors.
* `StructuredRunOutputEnabled` - (Optional) Whether this workspace should
  show output from Terraform runs using the enhanced UI when available.
  Defaults to `True`. Setting this to `False` ensures that all runs in this
  workspace will display their output as text logs.
* `SshKeyId` - (Optional) The ID of an SSH key to assign to the workspace.
* `TagNames` - (Optional) A list of tag names for this workspace. Note that tags must only contain lowercase letters, numbers, colons, or hyphens.
* `IgnoreAdditionalTagNames` - (Optional) Explicitly ignores `TagNames`
_not_ defined by config so they will not be overwritten by the configured
tags. This creates exceptional behavior in terraform with respect
to `TagNames` and is not recommended. This value must be applied before it
will be used.
* `Tags` - (Optional) A map of key value tags for this workspace.
* `IgnoreAdditionalTags` - (Optional) Explicitly ignores `Tags`
_not_ defined by config so they will not be overwritten by the configured
tags. This creates exceptional behavior in terraform with respect
to `Tags` and is not recommended. This value must be applied before it
will be used.
* `TerraformVersion` - (Optional) The version of Terraform to use for this
  workspace. This can be either an exact version or a
  [version constraint](https://developer.hashicorp.com/terraform/language/expressions/version-constraints)
  (like `~> 1.0.0`); if you specify a constraint, the workspace will always use
  the newest release that meets that constraint. Defaults to the latest
  available version.
* `TriggerPatterns` - (Optional) List of [glob patterns](https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings/vcs#glob-patterns-for-automatic-run-triggering) that describe the files HCP Terraform monitors for changes. Trigger patterns are always appended to the root directory of the repository. Mutually exclusive with `TriggerPrefixes`.
* `TriggerPrefixes` - (Optional) List of repository-root-relative paths which describe all locations
  to be tracked for changes.
* `VcsRepo` - (Optional) Settings for the workspace's VCS repository, enabling the [UI/VCS-driven run workflow](https://developer.hashicorp.com/terraform/cloud-docs/run/ui).
  Omit this argument to utilize the [CLI-driven](https://developer.hashicorp.com/terraform/cloud-docs/run/cli) and [API-driven](https://developer.hashicorp.com/terraform/cloud-docs/run/api)
  workflows, where runs are not driven by webhooks on your VCS provider.
* `WorkingDirectory` - (Optional) A relative path that Terraform will execute within.  Defaults to the root of your repository.

The `VcsRepo` block supports:

* `Identifier` - (Required) A reference to your VCS repository in the format
  `<vcs organization>/<repository>` where `<vcs organization>` and `<repository>` refer to the organization and repository
  in your VCS provider. The format for Azure DevOps is `<ado organization>/<ado project>/_git/<ado repository>`.
* `Branch` - (Optional) The repository branch that Terraform will execute from.
  This defaults to the repository's default branch (e.g. main).
* `GithubAppInstallationId` - (Optional) The installation id of the Github App. This conflicts with `OauthTokenId` and can only be used if `OauthTokenId` is not used.
* `IngressSubmodules` - (Optional) Whether submodules should be fetched when
  cloning the VCS repository. Defaults to `False`.
* `OauthTokenId` - (Optional) The VCS Connection (OAuth Connection + Token) to use.
  This ID can be obtained from a `TfeOauthClient` resource. This conflicts with `GithubAppInstallationId` and can only be used if `GithubAppInstallationId` is not used.
* `TagsRegex` - (Optional) A regular expression used to trigger a Workspace run for matching Git tags. This option conflicts with `TriggerPatterns` and `TriggerPrefixes`. Should only set this value if the former is not being used.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `Id` - The workspace ID.
* `ResourceCount` - The number of resources managed by the workspace.
* `HtmlUrl` - The URL to the browsable HTML overview of the workspace.
* `InheritsProjectAutoDestroy` - Indicates whether this workspace inherits project auto destroy settings.
* `EffectiveTags` - A map of key value tags for this workspace, including any tags inherited from the parent project.

## Import

Workspaces can be imported; use `<WORKSPACE ID>` or `<ORGANIZATION NAME>/<WORKSPACE NAME>` as the
import ID. For example:

```shell
terraform import tfe_workspace.test ws-CH5in3chf8RJjrVd
```

```shell
terraform import tfe_workspace.test my-org-name/my-wkspace-name
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-9172299860816457fdb3b3fe1ca94efcefcfcf20d4b35727c48cb9ae3ed85745 -->