---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_team_project_access"
description: |-
  Associate a team to permissions on a project.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_team_project_access

Associate a team to permissions on a project.

## Example Usage

Basic usage:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/project"
import "github.com/aws-samples/dummy/gen/providers/tfe/team"
import "github.com/aws-samples/dummy/gen/providers/tfe/teamProjectAccess"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeProjectTest := project.NewProject(this, jsii.String("test"), &projectConfig{
		name: jsii.String("myproject"),
		organization: jsii.String("my-org-name"),
	})
	tfeTeamAdmin := team.NewTeam(this, jsii.String("admin"), &teamConfig{
		name: jsii.String("my-admin-team"),
		organization: jsii.String("my-org-name"),
	})
	tfeTeamProjectAccessAdmin :=
	teamProjectAccess.NewTeamProjectAccess(this, jsii.String("admin_2"), &teamProjectAccessConfig{
		access: jsii.String("admin"),
		projectId: cdktf.Token_AsString(tfeProjectTest.id),
		teamId: cdktf.Token_*AsString(tfeTeamAdmin.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeTeamProjectAccessAdmin.OverrideLogicalId(jsii.String("admin"))
	return this
}
```

## Argument Reference

The following arguments are supported:

* `TeamId` - (Required) ID of the team to add to the project.
* `ProjectId` - (Required) ID of the project to which the team will be added.
* `Access` - (Required) Type of fixed access to grant. Valid values are `Admin`, `Maintain`, `Write`, `Read`, or `Custom`.

## Custom Access

If using `Custom` for `Access`, you can set the levels of individual permissions
that affect the project itself and all workspaces in the project, by using `ProjectAccess` and `WorkspaceAccess` arguments and their associated permission attributes. When using custom access, if attributes are not set they will be given a default value. Some permissions have values that are specific "strings" that denote the level of the permission, while other permissions are simple booleans.

The following permissions apply to the project itself.

| project_access      | Description, Default, Valid Values          |
|---------------------|---------------------------------------------|
| `Settings`          | The permission to grant for the project's settings. Default: `Read`. Valid strings: `Read`, `Update`, or `Delete` |
| `Teams`             | The permission to grant for the project's teams. Default: `None`, Valid strings: `None`, `Read`, or `Manage` |
| `VariableSets`     | The permission to grant for the project's variable sets. Default: `None`, Valid strings: `None`, `Read`, or `Write` |

</n>
</n>
</n>

The following permissions apply to all workspaces (and future workspaces) in the project.

| workspace_access     | Description, Default, Valid Values                    |
|----------------------|-------------------------------------------------------|
| `Runs`               | The permission to grant project's workspaces' runs. Default: `Read`. Valid strings: `Read`, `Plan`, or `Apply`. |
| `SentinelMocks`     | The permission to grant project's workspaces' Sentinel mocks. Default: `None`. Valid strings: `None`, or `Read`. |
| `StateVersions`     | The permission to grant project's workspaces' state versions. Default: `None` Valid strings: `None`, `ReadOutputs`, `Read`, or `Write`.|
| `Variables`          | The permission to grant project's workspaces' variables. Default `None`. Valid strings: `None`, `Read`, or `Write`. |
| `Create`             | The permission to create project's workspaces in the project. Default: `False`. Valid booleans `True`, `False` |
| `Locking`            | The permission to manually lock or unlock the project's workspaces. Default `False`. Valid booleans `True`, `False` |
| `Delete`             | The permission to delete the project's workspaces. Default: `False`. Valid booleans: `True`, `False` |
| `Move`               | This permission to move workspaces into and out of the project. The team must also have permissions to the project(s) receiving the the workspace(s). Default: `False`. Valid booleans: `True`, `False` |
| `RunTasks`          | The permission to manage run tasks within the project's workspaces. Default `False`. Valid booleans: `True`, `False` |


## Example Usage with Custom Project Permissions

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/project"
import "github.com/aws-samples/dummy/gen/providers/tfe/team"
import "github.com/aws-samples/dummy/gen/providers/tfe/teamProjectAccess"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeProjectTest := project.NewProject(this, jsii.String("test"), &projectConfig{
		name: jsii.String("myproject"),
		organization: jsii.String("my-org-name"),
	})
	tfeTeamDev := team.NewTeam(this, jsii.String("dev"), &teamConfig{
		name: jsii.String("my-dev-team"),
		organization: jsii.String("my-org-name"),
	})
	teamProjectAccess.NewTeamProjectAccess(this, jsii.String("custom"), &teamProjectAccessConfig{
		access: jsii.String("custom"),
		projectAccess: []interface{}{
			&teamProjectAccessProjectAccess{
				settings: jsii.String("read"),
				teams: jsii.String("none"),
				variableSets: jsii.String("write"),
			},
		},
		projectId: cdktf.Token_AsString(tfeProjectTest.id),
		teamId: cdktf.Token_*AsString(tfeTeamDev.id),
		workspaceAccess: []interface{}{
			&teamProjectAccessWorkspaceAccess{
				create: jsii.Boolean(true),
				delete: jsii.Boolean(false),
				locking: jsii.Boolean(true),
				move: jsii.Boolean(false),
				runTasks: jsii.Boolean(false),
				runs: jsii.String("apply"),
				sentinelMocks: jsii.String("none"),
				stateVersions: jsii.String("write"),
				variables: jsii.String("write"),
			},
		},
	})
	return this
}
```

## Attributes Reference

* `Id` The team project access ID.

## Import

Team project accesses can be imported; use the project team access ID as the import ID. For
example:

```shell
terraform import tfe_team_project_access.admin tprj-2pmtXpZa4YzVMTPi
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-9d287e81f7a933c07074422fa33873c0864ee9399463d646b8c6c4a8dda3dfca -->