---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_notification_configuration"
description: |-
  Manages notifications configurations.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_notification_configuration

HCP Terraform can be configured to send notifications for run state transitions.
Notification configurations allow you to specify a URL, destination type, and what events will trigger the notification.
Each workspace can have up to 20 notification configurations, and they apply to all runs for that workspace.


## Example Usage

Basic usage:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspace"
import "github.com/aws-samples/dummy/gen/providers/tfe/notificationConfiguration"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationTest := organization.NewOrganization(this, jsii.String("test"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeWorkspaceTest := workspace.NewWorkspace(this, jsii.String("test_1"), &workspaceConfig{
		name: jsii.String("my-workspace-name"),
		organization: cdktf.Token_AsString(tfeOrganizationTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeWorkspaceTest.OverrideLogicalId(jsii.String("test"))
	tfeNotificationConfigurationTest :=
	notificationConfiguration.NewNotificationConfiguration(this, jsii.String("test_2"), &notificationConfigurationConfig{
		destinationType: jsii.String("generic"),
		enabled: jsii.Boolean(true),
		name: jsii.String("my-test-notification-configuration"),
		triggers: []*string{
			jsii.String("run:created"),
			jsii.String("run:planning"),
			jsii.String("run:errored"),
		},
		url: jsii.String("https://example.com"),
		workspaceId: cdktf.Token_*AsString(tfeWorkspaceTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeNotificationConfigurationTest.OverrideLogicalId(jsii.String("test"))
	return this
}
```

With `DestinationType` of `Email`:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/organizationMembership"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspace"
import "github.com/aws-samples/dummy/gen/providers/tfe/notificationConfiguration"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationTest := organization.NewOrganization(this, jsii.String("test"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeOrganizationMembershipTest :=
	organizationMembership.NewOrganizationMembership(this, jsii.String("test_1"), &organizationMembershipConfig{
		email: jsii.String("test.member@company.com"),
		organization: jsii.String("my-org-name"),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeOrganizationMembershipTest.OverrideLogicalId(jsii.String("test"))
	tfeWorkspaceTest := workspace.NewWorkspace(this, jsii.String("test_2"), &workspaceConfig{
		name: jsii.String("my-workspace-name"),
		organization: cdktf.Token_AsString(tfeOrganizationTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeWorkspaceTest.OverrideLogicalId(jsii.String("test"))
	tfeNotificationConfigurationTest :=
	notificationConfiguration.NewNotificationConfiguration(this, jsii.String("test_3"), &notificationConfigurationConfig{
		destinationType: jsii.String("email"),
		emailUserIds: []*string{
			cdktf.Token_*AsString(tfeOrganizationMembershipTest.userId),
		},
		enabled: jsii.Boolean(true),
		name: jsii.String("my-test-email-notification-configuration"),
		triggers: []*string{
			jsii.String("run:created"),
			jsii.String("run:planning"),
			jsii.String("run:errored"),
		},
		workspaceId: cdktf.Token_*AsString(tfeWorkspaceTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeNotificationConfigurationTest.OverrideLogicalId(jsii.String("test"))
	return this
}
```

(**TFE only**) With `DestinationType` of `Email`, using `EmailAddresses` list and `EmailUsers`:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/organizationMembership"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspace"
import "github.com/aws-samples/dummy/gen/providers/tfe/notificationConfiguration"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationTest := organization.NewOrganization(this, jsii.String("test"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeOrganizationMembershipTest :=
	organizationMembership.NewOrganizationMembership(this, jsii.String("test_1"), &organizationMembershipConfig{
		email: jsii.String("test.member@company.com"),
		organization: jsii.String("my-org-name"),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeOrganizationMembershipTest.OverrideLogicalId(jsii.String("test"))
	tfeWorkspaceTest := workspace.NewWorkspace(this, jsii.String("test_2"), &workspaceConfig{
		name: jsii.String("my-workspace-name"),
		organization: cdktf.Token_AsString(tfeOrganizationTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeWorkspaceTest.OverrideLogicalId(jsii.String("test"))
	tfeNotificationConfigurationTest :=
	notificationConfiguration.NewNotificationConfiguration(this, jsii.String("test_3"), &notificationConfigurationConfig{
		destinationType: jsii.String("email"),
		emailAddresses: []*string{
			jsii.String("user1@company.com"),
			jsii.String("user2@company.com"),
			jsii.String("user3@company.com"),
		},
		emailUserIds: []*string{
			cdktf.Token_*AsString(tfeOrganizationMembershipTest.userId),
		},
		enabled: jsii.Boolean(true),
		name: jsii.String("my-test-email-notification-configuration"),
		triggers: []*string{
			jsii.String("run:created"),
			jsii.String("run:planning"),
			jsii.String("run:errored"),
		},
		workspaceId: cdktf.Token_*AsString(tfeWorkspaceTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeNotificationConfigurationTest.OverrideLogicalId(jsii.String("test"))
	return this
}
```

## Argument Reference

The following arguments are supported:

* `Name` - (Required) Name of the notification configuration.
* `DestinationType` - (Required) The type of notification configuration payload to send.
  Valid values are:
  * `Generic`
  * `Email` available in HCP Terraform or Terraform Enterprise v202005-1 or later
  * `Slack`
  * `MicrosoftTeams` available in HCP Terraform or Terraform Enterprise v202206-1 or later
* `EmailAddresses` - (Optional) **TFE only** A list of email addresses. This value
  _must not_ be provided if `DestinationType` is `Generic`, `MicrosoftTeams`, or `Slack`.
* `EmailUserIds` - (Optional) A list of user IDs. This value _must not_ be provided
  if `DestinationType` is `Generic`, `MicrosoftTeams`, or `Slack`.
* `Enabled` - (Optional) Whether the notification configuration should be enabled or not.
  Disabled configurations will not send any notifications. Defaults to `False`.
* `Token` - (Optional) A write-only secure token for the notification configuration, which can
  be used by the receiving server to verify request authenticity when configured for notification
  configurations with a destination type of `Generic`. Defaults to `Null`.
  This value _must not_ be provided if `DestinationType` is `Email`, `MicrosoftTeams`, or `Slack`.
* `Triggers` - (Optional) The array of triggers for which this notification configuration will
  send notifications. Valid values are `Run:created`, `Run:planning`, `Run:needsAttention`, `Run:applying`
  `Run:completed`, `Run:errored`, `Assessment:checkFailure`, `Assessment:drifted`, `Assessment:failed`, `Workspace:autoDestroyReminder`, or `Workspace:autoDestroyRunResults`.
  If omitted, no notification triggers are configured.
* `Url` - (Required if `DestinationType` is `Generic`, `MicrosoftTeams`, or `Slack`) The HTTP or HTTPS URL of the notification
  configuration where notification requests will be made. This value _must not_ be provided if `DestinationType`
  is `Email`.
* `WorkspaceId` - (Required) The id of the workspace that owns the notification configuration.

## Attributes Reference

* `Id` - The ID of the notification configuration.

## Import

Notification configurations can be imported; use `<NOTIFICATION CONFIGURATION ID>` as the import ID. For example:

```shell
terraform import tfe_notification_configuration.test nc-qV9JnKRkmtMa4zcA
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-710b7782960f76dfa6c0cc90313ce4411ea1070e9620f03dafea7305849d1d27 -->