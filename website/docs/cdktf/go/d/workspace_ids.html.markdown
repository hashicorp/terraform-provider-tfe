---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_workspace_ids"
description: |-
  Get information on workspace IDs.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: tfe_workspace_ids

Use this data source to get a map of workspace IDs.

## Example Usage

```go
import constructs "github.com/aws/constructs-go/constructs"
import cdktf "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/dataTfeWorkspaceIds"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	dataTfeWorkspaceIds.NewDataTfeWorkspaceIds(this, jsii.String("all"), &dataTfeWorkspaceIdsConfig{
		names: []*string{
			jsii.String("*"),
		},
		organization: jsii.String("my-org-name"),
	})
	dataTfeWorkspaceIds.NewDataTfeWorkspaceIds(this, jsii.String("app-frontend"), &dataTfeWorkspaceIdsConfig{
		names: []*string{
			jsii.String("app-frontend-prod"),
			jsii.String("app-frontend-dev1"),
			jsii.String("app-frontend-staging"),
		},
		organization: jsii.String("my-org-name"),
	})
	dataTfeWorkspaceIds.NewDataTfeWorkspaceIds(this, jsii.String("dev_env_tags_only"), &dataTfeWorkspaceIdsConfig{
		organization: jsii.String("my-org-name"),
		tagFilters: &dataTfeWorkspaceIdsTagFilters{
			include: map[string]*string{
				"environment": jsii.String("dev"),
			},
		},
	})
	dataTfeWorkspaceIds.NewDataTfeWorkspaceIds(this, jsii.String("exclude_all_matching_key"), &dataTfeWorkspaceIdsConfig{
		organization: jsii.String("my-org-name"),
		tagFilters: &dataTfeWorkspaceIdsTagFilters{
			exclude: map[string]*string{
				"bad_key": jsii.String("*"),
			},
		},
	})
	dataTfeWorkspaceIds.NewDataTfeWorkspaceIds(this, jsii.String("include_and_exclude"), &dataTfeWorkspaceIdsConfig{
		organization: jsii.String("my-org-name"),
		tagFilters: &dataTfeWorkspaceIdsTagFilters{
			exclude: map[string]*string{
				"team": jsii.String("prodsec"),
			},
			include: map[string]*string{
				"region": jsii.String("us-east-1"),
			},
		},
	})
	dataTfeWorkspaceIds.NewDataTfeWorkspaceIds(this, jsii.String("prod-apps"), &dataTfeWorkspaceIdsConfig{
		organization: jsii.String("my-org-name"),
		tagNames: []*string{
			jsii.String("prod"),
			jsii.String("app"),
			jsii.String("aws"),
		},
	})
	dataTfeWorkspaceIds.NewDataTfeWorkspaceIds(this, jsii.String("prod-only"), &dataTfeWorkspaceIdsConfig{
		excludeTags: []*string{
			jsii.String("app"),
		},
		organization: jsii.String("my-org-name"),
		tagNames: []*string{
			jsii.String("prod"),
		},
	})
	return this
}
```

## Argument Reference

The following arguments are supported. At least one of `Names` or `TagNames` must be present. Both can be used together.

* `Names` - (Optional) A list of workspace names to search for. Names that don't
  match a valid workspace will be omitted from the results, but are not an error.

    To select _all_ workspaces for an organization, provide a list with a single
    asterisk, like `["*"]`. The asterisk also supports partial matching on prefix and/or suffix, like `[*Prod]`, `[test-*]`, `[*dev*]`.
* `TagFilters` - (Optional) A set of key-value tag filters to search for workspaces.
* `TagNames` - (Optional) **Deprecated** A list of tag names to search for.
* `ExcludeTags` - (Optional) **Deprecated** A list of tag names to exclude when searching.
* `Organization` - (Required) Name of the organization.

The `TagFilters` block supports:

* `Include`: (Optional) A map of key-value tags the workspaces must contain. Each tag included here will be combined using a logical AND when filtering results.
* `Exclude`: (Optional) A map of key-value tags to exclude workspaces from the returned list. To exclude all workspaces containing a specific key, use `"*"` as the value.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `FullNames` - A map of workspace names and their full names, which look like `<ORGANIZATION>/<WORKSPACE>`.
* `Ids` - A map of workspace names and their opaque, immutable IDs, which look like `ws-<RANDOM STRING>`.

<!-- cache-key: cdktf-0.17.0-pre.15 input-59fc5c7e05bb6177bb75c0977a805249523a5ecc467f69e0c8d67905a2b343a2 -->